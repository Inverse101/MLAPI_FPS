// Code generated by "apigen"; DO NOT EDIT.
//Service Lobby
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class LobbyQueryIn
{
	public int ListMax=0;
	public int ListOfs=0;
	public string Filter="";
	public string Compatibility="";
	public string OrderBy="";
	public Dictionary<string,Variant> Params=new Dictionary<string,Variant>();
	public LobbyQueryIn(int _listmax=0,int _listofs=0,string _filter="",string _compatibility="",string _orderby="",Dictionary<string,Variant> _params=null) {ListMax=_listmax;ListOfs=_listofs;Filter=_filter;Compatibility=_compatibility;OrderBy=_orderby;if(_params!=null)Params=_params;}
	public LobbyQueryIn(LobbyQueryIn _copy) { if (_copy == null) return;ListMax=_copy.ListMax;ListOfs=_copy.ListOfs;Filter=_copy.Filter;Compatibility=_copy.Compatibility;OrderBy=_copy.OrderBy;if(_copy.Params!=null)Params=_copy.Params;}
};

public class LobbyStateBase
{
	public string LobbyID="";
	public int UsersMax=0;
	public bool Private=false;
	public bool HasStarted=false;
	public string Compatibility="";
	public Dictionary<string,Variant> Params=new Dictionary<string,Variant>();
	public LobbyStateBase(string _lobbyid="",int _usersmax=0,bool _private=false,bool _hasstarted=false,string _compatibility="",Dictionary<string,Variant> _params=null) {LobbyID=_lobbyid;UsersMax=_usersmax;Private=_private;HasStarted=_hasstarted;Compatibility=_compatibility;if(_params!=null)Params=_params;}
	public LobbyStateBase(LobbyStateBase _copy) { if (_copy == null) return;LobbyID=_copy.LobbyID;UsersMax=_copy.UsersMax;Private=_copy.Private;HasStarted=_copy.HasStarted;Compatibility=_copy.Compatibility;if(_copy.Params!=null)Params=_copy.Params;}
};

public class LobbyStateOut : LobbyStateBase
{
	public string InboxID="";
	public bool HasPassword=false;
	public int UsersCur=0;
	public int Version=0;
	public Timestamp Created=new Timestamp();
	public LobbyStateOut(string _inboxid="",bool _haspassword=false,int _userscur=0,int _version=0,Timestamp _created=new Timestamp(),LobbyStateBase _base=null) : base(_base) {InboxID=_inboxid;HasPassword=_haspassword;UsersCur=_userscur;Version=_version;Created=_created;}
	public LobbyStateOut(LobbyStateOut _copy) { if (_copy == null) return;InboxID=_copy.InboxID;HasPassword=_copy.HasPassword;UsersCur=_copy.UsersCur;Version=_copy.Version;Created=_copy.Created;}
};

public class LobbyQueryOut
{
	public List<LobbyStateOut> Results=new List<LobbyStateOut>();
	public int ResultOfs=0;
	public int ResultTotal=0;
	public LobbyQueryOut(List<LobbyStateOut> _results=null,int _resultofs=0,int _resulttotal=0) {if(_results!=null)Results=_results;ResultOfs=_resultofs;ResultTotal=_resulttotal;}
	public LobbyQueryOut(LobbyQueryOut _copy) { if (_copy == null) return;if(_copy.Results!=null)Results=_copy.Results;ResultOfs=_copy.ResultOfs;ResultTotal=_copy.ResultTotal;}
};

public class LobbyStateIn : LobbyStateBase
{
	public string UserID="";
	public string Password="";
	public LobbyStateIn(string _userid="",string _password="",LobbyStateBase _base=null) : base(_base) {UserID=_userid;Password=_password;}
	public LobbyStateIn(LobbyStateIn _copy) { if (_copy == null) return;UserID=_copy.UserID;Password=_copy.Password;}
};

public class LobbyUser
{
	public string UserID=""; //arg:"required" help:"Can be a <code>zeuzsdk.UserID</code> or a <code>custom user id</code>. Please be aware, if using a custom user id, it must be unique to a specific user and should be unguessable."
	public string DisplayName=""; //json:",omitempty" arg:"optional" help:"Users display name (like <code>'BossFighter341'</code>), may also be shown to other players"
	public string Team=""; //json:",omitempty" arg:"optional" help:"Users team, i.e. <code>'police'</code> or <code>'terrorist'</code>"
	public string Slot=""; //json:",omitempty" arg:"optional" help:"Users slot, i.e. <code>'fighter'</code>, <code>'healer'</code>, <code>'magician'</code> or desired lane to fight on"
	public string Info=""; //json:",omitempty" arg:"optional" help:"Field to deliver more metadata. (i.e. <code>serialized JSON</code>)"
	public LobbyUser(string _userid="",string _displayname="",string _team="",string _slot="",string _info="") {UserID=_userid;DisplayName=_displayname;Team=_team;Slot=_slot;Info=_info;}
	public LobbyUser(LobbyUser _copy) { if (_copy == null) return;UserID=_copy.UserID;DisplayName=_copy.DisplayName;Team=_copy.Team;Slot=_copy.Slot;Info=_copy.Info;}
};

public class LobbyUserBase : LobbyUser
{
	public bool Ready=false;
	public Dictionary<string,Variant> Params=new Dictionary<string,Variant>();
	public Timestamp Created=new Timestamp();
	public Timestamp Updated=new Timestamp();
	public LobbyUserBase(bool _ready=false,Dictionary<string,Variant> _params=null,Timestamp _created=new Timestamp(),Timestamp _updated=new Timestamp(),LobbyUser _base=null) : base(_base) {Ready=_ready;if(_params!=null)Params=_params;Created=_created;Updated=_updated;}
	public LobbyUserBase(LobbyUserBase _copy) { if (_copy == null) return;Ready=_copy.Ready;if(_copy.Params!=null)Params=_copy.Params;Created=_copy.Created;Updated=_copy.Updated;}
};

public class LobbyUsersOut
{
	public LobbyStateOut Lobby=new LobbyStateOut();
	public List<LobbyUserBase> Users=new List<LobbyUserBase>();
	public string ServerConnect="";
	public LobbyUsersOut(LobbyStateOut _lobby=null,List<LobbyUserBase> _users=null,string _serverconnect="") {if(_lobby!=null)Lobby=_lobby;if(_users!=null)Users=_users;ServerConnect=_serverconnect;}
	public LobbyUsersOut(LobbyUsersOut _copy) { if (_copy == null) return;if(_copy.Lobby!=null)Lobby=_copy.Lobby;if(_copy.Users!=null)Users=_copy.Users;ServerConnect=_copy.ServerConnect;}
};

public class LobbyStartDestroy
{
	public string LobbyID="";
	public string UserID="";
	public LobbyStartDestroy(string _lobbyid="",string _userid="") {LobbyID=_lobbyid;UserID=_userid;}
	public LobbyStartDestroy(LobbyStartDestroy _copy) { if (_copy == null) return;LobbyID=_copy.LobbyID;UserID=_copy.UserID;}
};

public class LobbyJoin
{
	public string LobbyID="";
	public string UserID="";
	public string Password="";
	public LobbyJoin(string _lobbyid="",string _userid="",string _password="") {LobbyID=_lobbyid;UserID=_userid;Password=_password;}
	public LobbyJoin(LobbyJoin _copy) { if (_copy == null) return;LobbyID=_copy.LobbyID;UserID=_copy.UserID;Password=_copy.Password;}
};

public class LobbyKick
{
	public string LobbyID="";
	public string UserID="";
	public string TargetID="";
	public bool Ban=false;
	public string Message="";
	public LobbyKick(string _lobbyid="",string _userid="",string _targetid="",bool _ban=false,string _message="") {LobbyID=_lobbyid;UserID=_userid;TargetID=_targetid;Ban=_ban;Message=_message;}
	public LobbyKick(LobbyKick _copy) { if (_copy == null) return;LobbyID=_copy.LobbyID;UserID=_copy.UserID;TargetID=_copy.TargetID;Ban=_copy.Ban;Message=_copy.Message;}
};

public class LobbyUserState : LobbyUserBase
{
	public string ServerConnect="";
	public LobbyUserState(string _serverconnect="",LobbyUserBase _base=null) : base(_base) {ServerConnect=_serverconnect;}
	public LobbyUserState(LobbyUserState _copy) { if (_copy == null) return;ServerConnect=_copy.ServerConnect;}
};

public class LobbyUserIn : LobbyUserState
{
	public string LobbyID="";
	public LobbyUserIn(string _lobbyid="",LobbyUserState _base=null) : base(_base) {LobbyID=_lobbyid;}
	public LobbyUserIn(LobbyUserIn _copy) { if (_copy == null) return;LobbyID=_copy.LobbyID;}
};

public class LobbyServerConnect
{
	public string ServerConnect="";
	public LobbyServerConnect(string _serverconnect="") {ServerConnect=_serverconnect;}
	public LobbyServerConnect(LobbyServerConnect _copy) { if (_copy == null) return;ServerConnect=_copy.ServerConnect;}
};

public class LobbyRefresh
{
	public string LobbyID="";
	public string UserID="";
	public int LastVersion=0; //help:"Only return lobby state if it has changed since LastVersion"
	public LobbyRefresh(string _lobbyid="",string _userid="",int _lastversion=0) {LobbyID=_lobbyid;UserID=_userid;LastVersion=_lastversion;}
	public LobbyRefresh(LobbyRefresh _copy) { if (_copy == null) return;LobbyID=_copy.LobbyID;UserID=_copy.UserID;LastVersion=_copy.LastVersion;}
};


public class ApiLobby
{ 
	public delegate void QueryDelegate(LobbyQueryOut result, string error);
    public class QueryRequest {  public LobbyQueryOut Result=new LobbyQueryOut();public string Error=""; public Request rq;
        public void Start(QueryDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(QueryDelegate del = null) { yield return rq.Send(); QueryDone(this); del?.Invoke(Result, Error); }
    }

    public static QueryRequest Query(LobbyQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        QueryRequest rq=new QueryRequest();
        rq.rq = Client.CreateRequest(ctx, "lobby_query", input);
        return rq;
    }

    public static void QueryDone(QueryRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (LobbyQueryOut)rd.ToObject(new LobbyQueryOut());
        }
    }


	public delegate void CreateDelegate(LobbyUsersOut result, string error);
    public class CreateRequest {  public LobbyUsersOut Result=new LobbyUsersOut();public string Error=""; public Request rq;
        public void Start(CreateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CreateDelegate del = null) { yield return rq.Send(); CreateDone(this); del?.Invoke(Result, Error); }
    }

    public static CreateRequest Create(LobbyStateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CreateRequest rq=new CreateRequest();
        rq.rq = Client.CreateRequest(ctx, "lobby_create", input);
        return rq;
    }

    public static void CreateDone(CreateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (LobbyUsersOut)rd.ToObject(new LobbyUsersOut());
        }
    }


	public delegate void DestroyDelegate(string error);
    public class DestroyRequest { public string Error=""; public Request rq;
        public void Start(DestroyDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DestroyDelegate del = null) { yield return rq.Send(); DestroyDone(this); del?.Invoke(Error); }
    }

    public static DestroyRequest Destroy(LobbyStartDestroy input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DestroyRequest rq=new DestroyRequest();
        rq.rq = Client.CreateRequest(ctx, "lobby_destroy", input);
        return rq;
    }

    public static void DestroyDone(DestroyRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void UpdateDelegate(LobbyUsersOut result, string error);
    public class UpdateRequest {  public LobbyUsersOut Result=new LobbyUsersOut();public string Error=""; public Request rq;
        public void Start(UpdateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(UpdateDelegate del = null) { yield return rq.Send(); UpdateDone(this); del?.Invoke(Result, Error); }
    }

    public static UpdateRequest Update(LobbyStateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        UpdateRequest rq=new UpdateRequest();
        rq.rq = Client.CreateRequest(ctx, "lobby_update", input);
        return rq;
    }

    public static void UpdateDone(UpdateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (LobbyUsersOut)rd.ToObject(new LobbyUsersOut());
        }
    }


	public delegate void JoinDelegate(LobbyUsersOut result, string error);
    public class JoinRequest {  public LobbyUsersOut Result=new LobbyUsersOut();public string Error=""; public Request rq;
        public void Start(JoinDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(JoinDelegate del = null) { yield return rq.Send(); JoinDone(this); del?.Invoke(Result, Error); }
    }

    public static JoinRequest Join(LobbyJoin input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        JoinRequest rq=new JoinRequest();
        rq.rq = Client.CreateRequest(ctx, "lobby_join", input);
        return rq;
    }

    public static void JoinDone(JoinRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (LobbyUsersOut)rd.ToObject(new LobbyUsersOut());
        }
    }


	public delegate void LeaveDelegate(string error);
    public class LeaveRequest { public string Error=""; public Request rq;
        public void Start(LeaveDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(LeaveDelegate del = null) { yield return rq.Send(); LeaveDone(this); del?.Invoke(Error); }
    }

    public static LeaveRequest Leave(LobbyJoin input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        LeaveRequest rq=new LeaveRequest();
        rq.rq = Client.CreateRequest(ctx, "lobby_leave", input);
        return rq;
    }

    public static void LeaveDone(LeaveRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void KickDelegate(string error);
    public class KickRequest { public string Error=""; public Request rq;
        public void Start(KickDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(KickDelegate del = null) { yield return rq.Send(); KickDone(this); del?.Invoke(Error); }
    }

    public static KickRequest Kick(LobbyKick input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        KickRequest rq=new KickRequest();
        rq.rq = Client.CreateRequest(ctx, "lobby_kick", input);
        return rq;
    }

    public static void KickDone(KickRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void UserDelegate(LobbyUsersOut result, string error);
    public class UserRequest {  public LobbyUsersOut Result=new LobbyUsersOut();public string Error=""; public Request rq;
        public void Start(UserDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(UserDelegate del = null) { yield return rq.Send(); UserDone(this); del?.Invoke(Result, Error); }
    }

    public static UserRequest User(LobbyUserIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        UserRequest rq=new UserRequest();
        rq.rq = Client.CreateRequest(ctx, "lobby_user", input);
        return rq;
    }

    public static void UserDone(UserRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (LobbyUsersOut)rd.ToObject(new LobbyUsersOut());
        }
    }


	public delegate void StartDelegate(LobbyServerConnect result, string error);
    public class StartRequest {  public LobbyServerConnect Result=new LobbyServerConnect();public string Error=""; public Request rq;
        public void Start(StartDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(StartDelegate del = null) { yield return rq.Send(); StartDone(this); del?.Invoke(Result, Error); }
    }

    public static StartRequest Start(LobbyStartDestroy input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        StartRequest rq=new StartRequest();
        rq.rq = Client.CreateRequest(ctx, "lobby_start", input);
        return rq;
    }

    public static void StartDone(StartRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (LobbyServerConnect)rd.ToObject(new LobbyServerConnect());
        }
    }


	public delegate void RefreshDelegate(LobbyUsersOut result, string error);
    public class RefreshRequest {  public LobbyUsersOut Result=new LobbyUsersOut();public string Error=""; public Request rq;
        public void Start(RefreshDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(RefreshDelegate del = null) { yield return rq.Send(); RefreshDone(this); del?.Invoke(Result, Error); }
    }

    public static RefreshRequest Refresh(LobbyRefresh input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        RefreshRequest rq=new RefreshRequest();
        rq.rq = Client.CreateRequest(ctx, "lobby_refresh", input);
        return rq;
    }

    public static void RefreshDone(RefreshRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (LobbyUsersOut)rd.ToObject(new LobbyUsersOut());
        }
    }


}

} //namespace Zeuz

// Code generated by "apigen"; DO NOT EDIT.
//Service Notification
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class NotificationGetIn
{
	public bool OnlyRead=false;
	public bool OnlyUnread=false;
	public Timestamp ValidAfter=new Timestamp();
	public int Limit=0;
	public NotificationGetIn(bool _onlyread=false,bool _onlyunread=false,Timestamp _validafter=new Timestamp(),int _limit=0) {OnlyRead=_onlyread;OnlyUnread=_onlyunread;ValidAfter=_validafter;Limit=_limit;}
	public NotificationGetIn(NotificationGetIn _copy) { if (_copy == null) return;OnlyRead=_copy.OnlyRead;OnlyUnread=_copy.OnlyUnread;ValidAfter=_copy.ValidAfter;Limit=_copy.Limit;}
};

public class NotificationGetOut
{
	public string ID="";
	public string Category="";
	public string Department="";
	public string Content="";
	public string Teaser="";
	public string HelpLink="";
	public int Priority=0;
	public Timestamp ValidFrom=new Timestamp();
	public Timestamp Expires=new Timestamp();
	public NotificationGetOut(string _id="",string _category="",string _department="",string _content="",string _teaser="",string _helplink="",int _priority=0,Timestamp _validfrom=new Timestamp(),Timestamp _expires=new Timestamp()) {ID=_id;Category=_category;Department=_department;Content=_content;Teaser=_teaser;HelpLink=_helplink;Priority=_priority;ValidFrom=_validfrom;Expires=_expires;}
	public NotificationGetOut(NotificationGetOut _copy) { if (_copy == null) return;ID=_copy.ID;Category=_copy.Category;Department=_copy.Department;Content=_copy.Content;Teaser=_copy.Teaser;HelpLink=_copy.HelpLink;Priority=_copy.Priority;ValidFrom=_copy.ValidFrom;Expires=_copy.Expires;}
};

public class NotificationCountGetOut
{
	public long Read=0;
	public long Total=0;
	public NotificationCountGetOut(long _read=0,long _total=0) {Read=_read;Total=_total;}
	public NotificationCountGetOut(NotificationCountGetOut _copy) { if (_copy == null) return;Read=_copy.Read;Total=_copy.Total;}
};

public class NotificationMarkIn
{
	public bool MarkAsRead=false;
	public List<string> NotificationIDs=new List<string>();
	public NotificationMarkIn(bool _markasread=false,List<string> _notificationids=null) {MarkAsRead=_markasread;if(_notificationids!=null)NotificationIDs=_notificationids;}
	public NotificationMarkIn(NotificationMarkIn _copy) { if (_copy == null) return;MarkAsRead=_copy.MarkAsRead;if(_copy.NotificationIDs!=null)NotificationIDs=_copy.NotificationIDs;}
};

public class NotificationGetAllOut
{
	public string ID="";
	public string CategoryID="";
	public string Category="";
	public string DepartmentID="";
	public string Department="";
	public string Content="";
	public string Teaser="";
	public int Priority=0;
	public Timestamp ValidFrom=new Timestamp();
	public Timestamp Expires=new Timestamp();
	public long ReadCount=0;
	public NotificationGetAllOut(string _id="",string _categoryid="",string _category="",string _departmentid="",string _department="",string _content="",string _teaser="",int _priority=0,Timestamp _validfrom=new Timestamp(),Timestamp _expires=new Timestamp(),long _readcount=0) {ID=_id;CategoryID=_categoryid;Category=_category;DepartmentID=_departmentid;Department=_department;Content=_content;Teaser=_teaser;Priority=_priority;ValidFrom=_validfrom;Expires=_expires;ReadCount=_readcount;}
	public NotificationGetAllOut(NotificationGetAllOut _copy) { if (_copy == null) return;ID=_copy.ID;CategoryID=_copy.CategoryID;Category=_copy.Category;DepartmentID=_copy.DepartmentID;Department=_copy.Department;Content=_copy.Content;Teaser=_copy.Teaser;Priority=_copy.Priority;ValidFrom=_copy.ValidFrom;Expires=_copy.Expires;ReadCount=_copy.ReadCount;}
};

public class NotificationCreateIn
{
	public string CategoryID="";
	public string DepartmentID="";
	public string Content="";
	public string Teaser="";
	public int Priority=0;
	public Timestamp ValidFrom=new Timestamp();
	public Timestamp Expires=new Timestamp();
	public NotificationCreateIn(string _categoryid="",string _departmentid="",string _content="",string _teaser="",int _priority=0,Timestamp _validfrom=new Timestamp(),Timestamp _expires=new Timestamp()) {CategoryID=_categoryid;DepartmentID=_departmentid;Content=_content;Teaser=_teaser;Priority=_priority;ValidFrom=_validfrom;Expires=_expires;}
	public NotificationCreateIn(NotificationCreateIn _copy) { if (_copy == null) return;CategoryID=_copy.CategoryID;DepartmentID=_copy.DepartmentID;Content=_copy.Content;Teaser=_copy.Teaser;Priority=_copy.Priority;ValidFrom=_copy.ValidFrom;Expires=_copy.Expires;}
};

public class NotificationUpdateIn
{
	public string ID="";
	public string CategoryID="";
	public string DepartmentID="";
	public string Content="";
	public string Teaser="";
	public int Priority=0;
	public Timestamp ValidFrom=new Timestamp();
	public Timestamp Expires=new Timestamp();
	public NotificationUpdateIn(string _id="",string _categoryid="",string _departmentid="",string _content="",string _teaser="",int _priority=0,Timestamp _validfrom=new Timestamp(),Timestamp _expires=new Timestamp()) {ID=_id;CategoryID=_categoryid;DepartmentID=_departmentid;Content=_content;Teaser=_teaser;Priority=_priority;ValidFrom=_validfrom;Expires=_expires;}
	public NotificationUpdateIn(NotificationUpdateIn _copy) { if (_copy == null) return;ID=_copy.ID;CategoryID=_copy.CategoryID;DepartmentID=_copy.DepartmentID;Content=_copy.Content;Teaser=_copy.Teaser;Priority=_copy.Priority;ValidFrom=_copy.ValidFrom;Expires=_copy.Expires;}
};

public class NotificationCategory : ItemCommon
{
	public string ID="";
	public string Name="";
	public NotificationCategory(string _id="",string _name="",ItemCommon _base=null) : base(_base) {ID=_id;Name=_name;}
	public NotificationCategory(NotificationCategory _copy) { if (_copy == null) return;ID=_copy.ID;Name=_copy.Name;}
};

public class NotificationCategoryUpdateIn
{
	public string ID="";
	public string Name="";
	public NotificationCategoryUpdateIn(string _id="",string _name="") {ID=_id;Name=_name;}
	public NotificationCategoryUpdateIn(NotificationCategoryUpdateIn _copy) { if (_copy == null) return;ID=_copy.ID;Name=_copy.Name;}
};

public class NotificationDepartment : ItemCommon
{
	public string ID="";
	public string Name="";
	public NotificationDepartment(string _id="",string _name="",ItemCommon _base=null) : base(_base) {ID=_id;Name=_name;}
	public NotificationDepartment(NotificationDepartment _copy) { if (_copy == null) return;ID=_copy.ID;Name=_copy.Name;}
};

public class NotificationDepartmentUpdateIn
{
	public string ID="";
	public string Name="";
	public NotificationDepartmentUpdateIn(string _id="",string _name="") {ID=_id;Name=_name;}
	public NotificationDepartmentUpdateIn(NotificationDepartmentUpdateIn _copy) { if (_copy == null) return;ID=_copy.ID;Name=_copy.Name;}
};


public class ApiNotification
{ 
	public delegate void GetDelegate(List<NotificationGetOut> result, string error);
    public class GetRequest {  public List<NotificationGetOut> Result=new List<NotificationGetOut>();public string Error=""; public Request rq;
        public void Start(GetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(GetDelegate del = null) { yield return rq.Send(); GetDone(this); del?.Invoke(Result, Error); }
    }

    public static GetRequest Get(NotificationGetIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        GetRequest rq=new GetRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_get", input);
        return rq;
    }

    public static void GetDone(GetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<NotificationGetOut>)rd.ToObject(new List<NotificationGetOut>());
        }
    }


	public delegate void CountDelegate(NotificationCountGetOut result, string error);
    public class CountRequest {  public NotificationCountGetOut Result=new NotificationCountGetOut();public string Error=""; public Request rq;
        public void Start(CountDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CountDelegate del = null) { yield return rq.Send(); CountDone(this); del?.Invoke(Result, Error); }
    }

    public static CountRequest Count(Timestamp input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CountRequest rq=new CountRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_count", input);
        return rq;
    }

    public static void CountDone(CountRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (NotificationCountGetOut)rd.ToObject(new NotificationCountGetOut());
        }
    }


	public delegate void MarkDelegate(string error);
    public class MarkRequest { public string Error=""; public Request rq;
        public void Start(MarkDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(MarkDelegate del = null) { yield return rq.Send(); MarkDone(this); del?.Invoke(Error); }
    }

    public static MarkRequest Mark(NotificationMarkIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        MarkRequest rq=new MarkRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_mark", input);
        return rq;
    }

    public static void MarkDone(MarkRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void GetallDelegate(List<NotificationGetAllOut> result, string error);
    public class GetallRequest {  public List<NotificationGetAllOut> Result=new List<NotificationGetAllOut>();public string Error=""; public Request rq;
        public void Start(GetallDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(GetallDelegate del = null) { yield return rq.Send(); GetallDone(this); del?.Invoke(Result, Error); }
    }

    public static GetallRequest Getall( Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        GetallRequest rq=new GetallRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_getall", null);
        return rq;
    }

    public static void GetallDone(GetallRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<NotificationGetAllOut>)rd.ToObject(new List<NotificationGetAllOut>());
        }
    }


	public delegate void CreateDelegate(string error);
    public class CreateRequest { public string Error=""; public Request rq;
        public void Start(CreateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CreateDelegate del = null) { yield return rq.Send(); CreateDone(this); del?.Invoke(Error); }
    }

    public static CreateRequest Create(NotificationCreateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CreateRequest rq=new CreateRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_create", input);
        return rq;
    }

    public static void CreateDone(CreateRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void UpdateDelegate(string error);
    public class UpdateRequest { public string Error=""; public Request rq;
        public void Start(UpdateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(UpdateDelegate del = null) { yield return rq.Send(); UpdateDone(this); del?.Invoke(Error); }
    }

    public static UpdateRequest Update(NotificationUpdateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        UpdateRequest rq=new UpdateRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_update", input);
        return rq;
    }

    public static void UpdateDone(UpdateRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void DeleteDelegate(string error);
    public class DeleteRequest { public string Error=""; public Request rq;
        public void Start(DeleteDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DeleteDelegate del = null) { yield return rq.Send(); DeleteDone(this); del?.Invoke(Error); }
    }

    public static DeleteRequest Delete(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DeleteRequest rq=new DeleteRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_delete", input);
        return rq;
    }

    public static void DeleteDone(DeleteRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void CategorygetDelegate(List<NotificationCategory> result, string error);
    public class CategorygetRequest {  public List<NotificationCategory> Result=new List<NotificationCategory>();public string Error=""; public Request rq;
        public void Start(CategorygetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CategorygetDelegate del = null) { yield return rq.Send(); CategorygetDone(this); del?.Invoke(Result, Error); }
    }

    public static CategorygetRequest Categoryget( Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CategorygetRequest rq=new CategorygetRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_categoryget", null);
        return rq;
    }

    public static void CategorygetDone(CategorygetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<NotificationCategory>)rd.ToObject(new List<NotificationCategory>());
        }
    }


	public delegate void CategorycreateDelegate(string error);
    public class CategorycreateRequest { public string Error=""; public Request rq;
        public void Start(CategorycreateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CategorycreateDelegate del = null) { yield return rq.Send(); CategorycreateDone(this); del?.Invoke(Error); }
    }

    public static CategorycreateRequest Categorycreate(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CategorycreateRequest rq=new CategorycreateRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_categorycreate", input);
        return rq;
    }

    public static void CategorycreateDone(CategorycreateRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void CategoryupdateDelegate(string error);
    public class CategoryupdateRequest { public string Error=""; public Request rq;
        public void Start(CategoryupdateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CategoryupdateDelegate del = null) { yield return rq.Send(); CategoryupdateDone(this); del?.Invoke(Error); }
    }

    public static CategoryupdateRequest Categoryupdate(NotificationCategoryUpdateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CategoryupdateRequest rq=new CategoryupdateRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_categoryupdate", input);
        return rq;
    }

    public static void CategoryupdateDone(CategoryupdateRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void CategorydeleteDelegate(string error);
    public class CategorydeleteRequest { public string Error=""; public Request rq;
        public void Start(CategorydeleteDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CategorydeleteDelegate del = null) { yield return rq.Send(); CategorydeleteDone(this); del?.Invoke(Error); }
    }

    public static CategorydeleteRequest Categorydelete(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CategorydeleteRequest rq=new CategorydeleteRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_categorydelete", input);
        return rq;
    }

    public static void CategorydeleteDone(CategorydeleteRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void DepartmentgetDelegate(List<NotificationDepartment> result, string error);
    public class DepartmentgetRequest {  public List<NotificationDepartment> Result=new List<NotificationDepartment>();public string Error=""; public Request rq;
        public void Start(DepartmentgetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DepartmentgetDelegate del = null) { yield return rq.Send(); DepartmentgetDone(this); del?.Invoke(Result, Error); }
    }

    public static DepartmentgetRequest Departmentget( Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DepartmentgetRequest rq=new DepartmentgetRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_departmentget", null);
        return rq;
    }

    public static void DepartmentgetDone(DepartmentgetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<NotificationDepartment>)rd.ToObject(new List<NotificationDepartment>());
        }
    }


	public delegate void DepartmentcreateDelegate(string error);
    public class DepartmentcreateRequest { public string Error=""; public Request rq;
        public void Start(DepartmentcreateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DepartmentcreateDelegate del = null) { yield return rq.Send(); DepartmentcreateDone(this); del?.Invoke(Error); }
    }

    public static DepartmentcreateRequest Departmentcreate(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DepartmentcreateRequest rq=new DepartmentcreateRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_departmentcreate", input);
        return rq;
    }

    public static void DepartmentcreateDone(DepartmentcreateRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void DepartmentupdateDelegate(string error);
    public class DepartmentupdateRequest { public string Error=""; public Request rq;
        public void Start(DepartmentupdateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DepartmentupdateDelegate del = null) { yield return rq.Send(); DepartmentupdateDone(this); del?.Invoke(Error); }
    }

    public static DepartmentupdateRequest Departmentupdate(NotificationDepartmentUpdateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DepartmentupdateRequest rq=new DepartmentupdateRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_departmentupdate", input);
        return rq;
    }

    public static void DepartmentupdateDone(DepartmentupdateRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void DepartmentdeleteDelegate(string error);
    public class DepartmentdeleteRequest { public string Error=""; public Request rq;
        public void Start(DepartmentdeleteDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DepartmentdeleteDelegate del = null) { yield return rq.Send(); DepartmentdeleteDone(this); del?.Invoke(Error); }
    }

    public static DepartmentdeleteRequest Departmentdelete(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DepartmentdeleteRequest rq=new DepartmentdeleteRequest();
        rq.rq = Client.CreateRequest(ctx, "notification_departmentdelete", input);
        return rq;
    }

    public static void DepartmentdeleteDone(DepartmentdeleteRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


}

} //namespace Zeuz

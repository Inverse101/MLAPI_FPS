// Code generated by "apigen"; DO NOT EDIT.
//Service Account
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class AccountDeveloperCreateIn
{
	public string Login=""; //arg:"required" help:"developer login name"
	public string Title=""; //arg:"" help:"display name"
	public string Desc=""; //arg:""
	public string AccountID="";
	public sbyte AccountRole=0;
	public string PWHash="";
	public Properties Props=new Properties(); //arg:"-"
	public AccountDeveloperCreateIn(string _login="",string _title="",string _desc="",string _accountid="",sbyte _accountrole=0,string _pwhash="",Properties _props=null) {Login=_login;Title=_title;Desc=_desc;AccountID=_accountid;AccountRole=_accountrole;PWHash=_pwhash;if(_props!=null)Props=_props;}
	public AccountDeveloperCreateIn(AccountDeveloperCreateIn _copy) { if (_copy == null) return;Login=_copy.Login;Title=_copy.Title;Desc=_copy.Desc;AccountID=_copy.AccountID;AccountRole=_copy.AccountRole;PWHash=_copy.PWHash;if(_copy.Props!=null)Props=_copy.Props;}
};

public class AccountDeveloperCreatePwHashIn
{
	public string DevID=""; //arg:"required" help:"id of developer who wants to create a password"
	public string AccountID=""; //arg:"required" help:"id of account that developer will be in"
	public string Hash=""; //arg:"required" help:"secure hash related to developer for verification"
	public string PWHash=""; //arg:"required" help:"the hash of the password that developer picked"
	public AccountDeveloperCreatePwHashIn(string _devid="",string _accountid="",string _hash="",string _pwhash="") {DevID=_devid;AccountID=_accountid;Hash=_hash;PWHash=_pwhash;}
	public AccountDeveloperCreatePwHashIn(AccountDeveloperCreatePwHashIn _copy) { if (_copy == null) return;DevID=_copy.DevID;AccountID=_copy.AccountID;Hash=_copy.Hash;PWHash=_copy.PWHash;}
};

public class AccountDeveloperSetPwHashIn
{
	public string CurrentPWHash=""; //arg:"required" help:"current password as hash"
	public string NewPWHash=""; //arg:"required" help:"desired password as hash"
	public AccountDeveloperSetPwHashIn(string _currentpwhash="",string _newpwhash="") {CurrentPWHash=_currentpwhash;NewPWHash=_newpwhash;}
	public AccountDeveloperSetPwHashIn(AccountDeveloperSetPwHashIn _copy) { if (_copy == null) return;CurrentPWHash=_copy.CurrentPWHash;NewPWHash=_copy.NewPWHash;}
};

public class AccountDeveloperPasswordResetIn
{
	public string Email=""; //arg:"required" help:"developer email"
	public string Token=""; //arg:"required" help:"recaptcha token"
	public AccountDeveloperPasswordResetIn(string _email="",string _token="") {Email=_email;Token=_token;}
	public AccountDeveloperPasswordResetIn(AccountDeveloperPasswordResetIn _copy) { if (_copy == null) return;Email=_copy.Email;Token=_copy.Token;}
};

public class AccountDeveloperPasswordResetExecuteRequestIn
{
	public string Email=""; //arg:"required" help:"developer email"
	public string Hash=""; //arg:"required" help:"secure hash related to password reset for verification"
	public string PasswordHash=""; //arg:"required" help:"the hash of the password that developer picked"
	public string PasswordConfirmHash=""; //arg:"required" help:"the confirmation of the hash of the password that developer picked"
	public AccountDeveloperPasswordResetExecuteRequestIn(string _email="",string _hash="",string _passwordhash="",string _passwordconfirmhash="") {Email=_email;Hash=_hash;PasswordHash=_passwordhash;PasswordConfirmHash=_passwordconfirmhash;}
	public AccountDeveloperPasswordResetExecuteRequestIn(AccountDeveloperPasswordResetExecuteRequestIn _copy) { if (_copy == null) return;Email=_copy.Email;Hash=_copy.Hash;PasswordHash=_copy.PasswordHash;PasswordConfirmHash=_copy.PasswordConfirmHash;}
};

public class AccountCreateIn
{
	public string Title=""; //arg:""
	public string Desc=""; //arg:""
	public string EMail=""; //arg:"required" help:"email address"
	public string Company=""; //arg:"required" help:"company name"
	public string Department=""; //arg:""
	public string Country=""; //arg:""
	public string ZIP=""; //arg:""
	public string City=""; //arg:""
	public string StreetAddr=""; //arg:""
	public Properties Props=new Properties(); //arg:"-"
	public List<ProvisioningAccount> ProvisioningAccounts=new List<ProvisioningAccount>(); //arg:"-"
	public AccountCreateIn(string _title="",string _desc="",string _email="",string _company="",string _department="",string _country="",string _zip="",string _city="",string _streetaddr="",Properties _props=null,List<ProvisioningAccount> _provisioningaccounts=null) {Title=_title;Desc=_desc;EMail=_email;Company=_company;Department=_department;Country=_country;ZIP=_zip;City=_city;StreetAddr=_streetaddr;if(_props!=null)Props=_props;if(_provisioningaccounts!=null)ProvisioningAccounts=_provisioningaccounts;}
	public AccountCreateIn(AccountCreateIn _copy) { if (_copy == null) return;Title=_copy.Title;Desc=_copy.Desc;EMail=_copy.EMail;Company=_copy.Company;Department=_copy.Department;Country=_copy.Country;ZIP=_copy.ZIP;City=_copy.City;StreetAddr=_copy.StreetAddr;if(_copy.Props!=null)Props=_copy.Props;if(_copy.ProvisioningAccounts!=null)ProvisioningAccounts=_copy.ProvisioningAccounts;}
};

public class AccountChange
{
	public string Account=""; //arg:"required" help:"account to update"
	public AccountChange(string _account="") {Account=_account;}
	public AccountChange(AccountChange _copy) { if (_copy == null) return;Account=_copy.Account;}
};

public class AccountProjectCreateIn : AccountChange
{
	public string Title=""; //arg:""
	public string Desc=""; //arg:""
	public Properties Props=new Properties(); //arg:"-"
	public AccountProjectCreateIn(string _title="",string _desc="",Properties _props=null,AccountChange _base=null) : base(_base) {Title=_title;Desc=_desc;if(_props!=null)Props=_props;}
	public AccountProjectCreateIn(AccountProjectCreateIn _copy) { if (_copy == null) return;Title=_copy.Title;Desc=_copy.Desc;if(_copy.Props!=null)Props=_copy.Props;}
};

public class AccountProjectDeleteIn : AccountChange
{
	public string Proj=""; //arg:"required" help:"project to delete"
	public AccountProjectDeleteIn(string _proj="",AccountChange _base=null) : base(_base) {Proj=_proj;}
	public AccountProjectDeleteIn(AccountProjectDeleteIn _copy) { if (_copy == null) return;Proj=_copy.Proj;}
};

public class AccountTeamCreateIn : AccountChange
{
	public string Title=""; //arg:""
	public string Desc=""; //arg:""
	public Properties Props=new Properties(); //arg:"-"
	public List<string> Devs=new List<string>();
	public AccountTeamCreateIn(string _title="",string _desc="",Properties _props=null,List<string> _devs=null,AccountChange _base=null) : base(_base) {Title=_title;Desc=_desc;if(_props!=null)Props=_props;if(_devs!=null)Devs=_devs;}
	public AccountTeamCreateIn(AccountTeamCreateIn _copy) { if (_copy == null) return;Title=_copy.Title;Desc=_copy.Desc;if(_copy.Props!=null)Props=_copy.Props;if(_copy.Devs!=null)Devs=_copy.Devs;}
};

public class Team : ItemCommon
{
	public string ID="";
	public string Account="";
	public string Desc="";
	public List<string> Devs=new List<string>();
	public Team(string _id="",string _account="",string _desc="",List<string> _devs=null,ItemCommon _base=null) : base(_base) {ID=_id;Account=_account;Desc=_desc;if(_devs!=null)Devs=_devs;}
	public Team(Team _copy) { if (_copy == null) return;ID=_copy.ID;Account=_copy.Account;Desc=_copy.Desc;if(_copy.Devs!=null)Devs=_copy.Devs;}
};

public class AccountTeamDeleteIn : AccountChange
{
	public string Team=""; //arg:"required" help:"team to delete"
	public AccountTeamDeleteIn(string _team="",AccountChange _base=null) : base(_base) {Team=_team;}
	public AccountTeamDeleteIn(AccountTeamDeleteIn _copy) { if (_copy == null) return;Team=_copy.Team;}
};

public class AccountEnvCreateIn
{
	public string Proj="";
	public string Title="";
	public string Desc="";
	public Properties Props=new Properties(); //arg:"-"
	public AccountEnvCreateIn(string _proj="",string _title="",string _desc="",Properties _props=null) {Proj=_proj;Title=_title;Desc=_desc;if(_props!=null)Props=_props;}
	public AccountEnvCreateIn(AccountEnvCreateIn _copy) { if (_copy == null) return;Proj=_copy.Proj;Title=_copy.Title;Desc=_copy.Desc;if(_copy.Props!=null)Props=_copy.Props;}
};

public class AccountEnvDeleteIn
{
	public string Proj="";
	public string Env="";
	public AccountEnvDeleteIn(string _proj="",string _env="") {Proj=_proj;Env=_env;}
	public AccountEnvDeleteIn(AccountEnvDeleteIn _copy) { if (_copy == null) return;Proj=_copy.Proj;Env=_copy.Env;}
};

public class AccountDevQuickSetupIn
{
	public string Login=""; //arg:"required" help:"developer login name"
	public string Title=""; //arg:"required" help:"game title"
	public string PWHash="";
	public AccountDevQuickSetupIn(string _login="",string _title="",string _pwhash="") {Login=_login;Title=_title;PWHash=_pwhash;}
	public AccountDevQuickSetupIn(AccountDevQuickSetupIn _copy) { if (_copy == null) return;Login=_copy.Login;Title=_copy.Title;PWHash=_copy.PWHash;}
};

public class AccountDevQuickSetupOut
{
	public string Login="";
	public string Account="";
	public string User="";
	public string Dev="";
	public string Team="";
	public string Proj="";
	public string Env="";
	public string APIKey="";
	public AccountDevQuickSetupOut(string _login="",string _account="",string _user="",string _dev="",string _team="",string _proj="",string _env="",string _apikey="") {Login=_login;Account=_account;User=_user;Dev=_dev;Team=_team;Proj=_proj;Env=_env;APIKey=_apikey;}
	public AccountDevQuickSetupOut(AccountDevQuickSetupOut _copy) { if (_copy == null) return;Login=_copy.Login;Account=_copy.Account;User=_copy.User;Dev=_copy.Dev;Team=_copy.Team;Proj=_copy.Proj;Env=_copy.Env;APIKey=_copy.APIKey;}
};

public class AccountQuotaInfo
{
	public string Account="";
	public int QuotaCL=0;
	public int QuotaBM=0;
	public AccountQuotaInfo(string _account="",int _quotacl=0,int _quotabm=0) {Account=_account;QuotaCL=_quotacl;QuotaBM=_quotabm;}
	public AccountQuotaInfo(AccountQuotaInfo _copy) { if (_copy == null) return;Account=_copy.Account;QuotaCL=_copy.QuotaCL;QuotaBM=_copy.QuotaBM;}
};


public class ApiAccount
{ 
	public delegate void DevelopercreateDelegate(string result, string error);
    public class DevelopercreateRequest {  public string Result="";public string Error=""; public Request rq;
        public void Start(DevelopercreateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DevelopercreateDelegate del = null) { yield return rq.Send(); DevelopercreateDone(this); del?.Invoke(Result, Error); }
    }

    public static DevelopercreateRequest Developercreate(AccountDeveloperCreateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DevelopercreateRequest rq=new DevelopercreateRequest();
        rq.rq = Client.CreateRequest(ctx, "account_developercreate", input);
        return rq;
    }

    public static void DevelopercreateDone(DevelopercreateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (string)rd.ToObject("");
        }
    }


	public delegate void DeveloperinviteDelegate(string result, string error);
    public class DeveloperinviteRequest {  public string Result="";public string Error=""; public Request rq;
        public void Start(DeveloperinviteDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DeveloperinviteDelegate del = null) { yield return rq.Send(); DeveloperinviteDone(this); del?.Invoke(Result, Error); }
    }

    public static DeveloperinviteRequest Developerinvite(AccountDeveloperCreateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DeveloperinviteRequest rq=new DeveloperinviteRequest();
        rq.rq = Client.CreateRequest(ctx, "account_developerinvite", input);
        return rq;
    }

    public static void DeveloperinviteDone(DeveloperinviteRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (string)rd.ToObject("");
        }
    }


	public delegate void DevelopergetDelegate(Developer result, string error);
    public class DevelopergetRequest {  public Developer Result=new Developer();public string Error=""; public Request rq;
        public void Start(DevelopergetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DevelopergetDelegate del = null) { yield return rq.Send(); DevelopergetDone(this); del?.Invoke(Result, Error); }
    }

    public static DevelopergetRequest Developerget(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DevelopergetRequest rq=new DevelopergetRequest();
        rq.rq = Client.CreateRequest(ctx, "account_developerget", input);
        return rq;
    }

    public static void DevelopergetDone(DevelopergetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (Developer)rd.ToObject(new Developer());
        }
    }


	public delegate void DevelopersgetDelegate(List<Developer> result, string error);
    public class DevelopersgetRequest {  public List<Developer> Result=new List<Developer>();public string Error=""; public Request rq;
        public void Start(DevelopersgetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DevelopersgetDelegate del = null) { yield return rq.Send(); DevelopersgetDone(this); del?.Invoke(Result, Error); }
    }

    public static DevelopersgetRequest Developersget(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DevelopersgetRequest rq=new DevelopersgetRequest();
        rq.rq = Client.CreateRequest(ctx, "account_developersget", input);
        return rq;
    }

    public static void DevelopersgetDone(DevelopersgetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<Developer>)rd.ToObject(new List<Developer>());
        }
    }


	public delegate void DeveloperupdateDelegate(string error);
    public class DeveloperupdateRequest { public string Error=""; public Request rq;
        public void Start(DeveloperupdateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DeveloperupdateDelegate del = null) { yield return rq.Send(); DeveloperupdateDone(this); del?.Invoke(Error); }
    }

    public static DeveloperupdateRequest Developerupdate(Developer input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DeveloperupdateRequest rq=new DeveloperupdateRequest();
        rq.rq = Client.CreateRequest(ctx, "account_developerupdate", input);
        return rq;
    }

    public static void DeveloperupdateDone(DeveloperupdateRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void DevelopercreatepwhashDelegate(Developer result, string error);
    public class DevelopercreatepwhashRequest {  public Developer Result=new Developer();public string Error=""; public Request rq;
        public void Start(DevelopercreatepwhashDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DevelopercreatepwhashDelegate del = null) { yield return rq.Send(); DevelopercreatepwhashDone(this); del?.Invoke(Result, Error); }
    }

    public static DevelopercreatepwhashRequest Developercreatepwhash(AccountDeveloperCreatePwHashIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DevelopercreatepwhashRequest rq=new DevelopercreatepwhashRequest();
        rq.rq = Client.CreateRequest(ctx, "account_developercreatepwhash", input);
        return rq;
    }

    public static void DevelopercreatepwhashDone(DevelopercreatepwhashRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (Developer)rd.ToObject(new Developer());
        }
    }


	public delegate void DevelopersetpwhashDelegate(Developer result, string error);
    public class DevelopersetpwhashRequest {  public Developer Result=new Developer();public string Error=""; public Request rq;
        public void Start(DevelopersetpwhashDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DevelopersetpwhashDelegate del = null) { yield return rq.Send(); DevelopersetpwhashDone(this); del?.Invoke(Result, Error); }
    }

    public static DevelopersetpwhashRequest Developersetpwhash(AccountDeveloperSetPwHashIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DevelopersetpwhashRequest rq=new DevelopersetpwhashRequest();
        rq.rq = Client.CreateRequest(ctx, "account_developersetpwhash", input);
        return rq;
    }

    public static void DevelopersetpwhashDone(DevelopersetpwhashRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (Developer)rd.ToObject(new Developer());
        }
    }


	public delegate void DeveloperrevokeDelegate(string error);
    public class DeveloperrevokeRequest { public string Error=""; public Request rq;
        public void Start(DeveloperrevokeDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DeveloperrevokeDelegate del = null) { yield return rq.Send(); DeveloperrevokeDone(this); del?.Invoke(Error); }
    }

    public static DeveloperrevokeRequest Developerrevoke(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DeveloperrevokeRequest rq=new DeveloperrevokeRequest();
        rq.rq = Client.CreateRequest(ctx, "account_developerrevoke", input);
        return rq;
    }

    public static void DeveloperrevokeDone(DeveloperrevokeRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void DeveloperpasswordresetrequestDelegate(string error);
    public class DeveloperpasswordresetrequestRequest { public string Error=""; public Request rq;
        public void Start(DeveloperpasswordresetrequestDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DeveloperpasswordresetrequestDelegate del = null) { yield return rq.Send(); DeveloperpasswordresetrequestDone(this); del?.Invoke(Error); }
    }

    public static DeveloperpasswordresetrequestRequest Developerpasswordresetrequest(AccountDeveloperPasswordResetIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DeveloperpasswordresetrequestRequest rq=new DeveloperpasswordresetrequestRequest();
        rq.rq = Client.CreateRequest(ctx, "account_developerpasswordresetrequest", input);
        return rq;
    }

    public static void DeveloperpasswordresetrequestDone(DeveloperpasswordresetrequestRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void DeveloperpasswordresetDelegate(string error);
    public class DeveloperpasswordresetRequest { public string Error=""; public Request rq;
        public void Start(DeveloperpasswordresetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DeveloperpasswordresetDelegate del = null) { yield return rq.Send(); DeveloperpasswordresetDone(this); del?.Invoke(Error); }
    }

    public static DeveloperpasswordresetRequest Developerpasswordreset(AccountDeveloperPasswordResetExecuteRequestIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DeveloperpasswordresetRequest rq=new DeveloperpasswordresetRequest();
        rq.rq = Client.CreateRequest(ctx, "account_developerpasswordreset", input);
        return rq;
    }

    public static void DeveloperpasswordresetDone(DeveloperpasswordresetRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void DeveloperispasswordresethashexpiredDelegate(bool result, string error);
    public class DeveloperispasswordresethashexpiredRequest {  public bool Result=false;public string Error=""; public Request rq;
        public void Start(DeveloperispasswordresethashexpiredDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DeveloperispasswordresethashexpiredDelegate del = null) { yield return rq.Send(); DeveloperispasswordresethashexpiredDone(this); del?.Invoke(Result, Error); }
    }

    public static DeveloperispasswordresethashexpiredRequest Developerispasswordresethashexpired(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DeveloperispasswordresethashexpiredRequest rq=new DeveloperispasswordresethashexpiredRequest();
        rq.rq = Client.CreateRequest(ctx, "account_developerispasswordresethashexpired", input);
        return rq;
    }

    public static void DeveloperispasswordresethashexpiredDone(DeveloperispasswordresethashexpiredRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (bool)rd.ToObject(false);
        }
    }


	public delegate void AccountcreateDelegate(string result, string error);
    public class AccountcreateRequest {  public string Result="";public string Error=""; public Request rq;
        public void Start(AccountcreateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(AccountcreateDelegate del = null) { yield return rq.Send(); AccountcreateDone(this); del?.Invoke(Result, Error); }
    }

    public static AccountcreateRequest Accountcreate(AccountCreateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        AccountcreateRequest rq=new AccountcreateRequest();
        rq.rq = Client.CreateRequest(ctx, "account_accountcreate", input);
        return rq;
    }

    public static void AccountcreateDone(AccountcreateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (string)rd.ToObject("");
        }
    }


	public delegate void AccountgetDelegate(Account result, string error);
    public class AccountgetRequest {  public Account Result=new Account();public string Error=""; public Request rq;
        public void Start(AccountgetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(AccountgetDelegate del = null) { yield return rq.Send(); AccountgetDone(this); del?.Invoke(Result, Error); }
    }

    public static AccountgetRequest Accountget(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        AccountgetRequest rq=new AccountgetRequest();
        rq.rq = Client.CreateRequest(ctx, "account_accountget", input);
        return rq;
    }

    public static void AccountgetDone(AccountgetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (Account)rd.ToObject(new Account());
        }
    }


	public delegate void AccountupdateDelegate(string error);
    public class AccountupdateRequest { public string Error=""; public Request rq;
        public void Start(AccountupdateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(AccountupdateDelegate del = null) { yield return rq.Send(); AccountupdateDone(this); del?.Invoke(Error); }
    }

    public static AccountupdateRequest Accountupdate(Account input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        AccountupdateRequest rq=new AccountupdateRequest();
        rq.rq = Client.CreateRequest(ctx, "account_accountupdate", input);
        return rq;
    }

    public static void AccountupdateDone(AccountupdateRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void ProjectcreateDelegate(string result, string error);
    public class ProjectcreateRequest {  public string Result="";public string Error=""; public Request rq;
        public void Start(ProjectcreateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ProjectcreateDelegate del = null) { yield return rq.Send(); ProjectcreateDone(this); del?.Invoke(Result, Error); }
    }

    public static ProjectcreateRequest Projectcreate(AccountProjectCreateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ProjectcreateRequest rq=new ProjectcreateRequest();
        rq.rq = Client.CreateRequest(ctx, "account_projectcreate", input);
        return rq;
    }

    public static void ProjectcreateDone(ProjectcreateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (string)rd.ToObject("");
        }
    }


	public delegate void ProjectgetDelegate(Proj result, string error);
    public class ProjectgetRequest {  public Proj Result=new Proj();public string Error=""; public Request rq;
        public void Start(ProjectgetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ProjectgetDelegate del = null) { yield return rq.Send(); ProjectgetDone(this); del?.Invoke(Result, Error); }
    }

    public static ProjectgetRequest Projectget(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ProjectgetRequest rq=new ProjectgetRequest();
        rq.rq = Client.CreateRequest(ctx, "account_projectget", input);
        return rq;
    }

    public static void ProjectgetDone(ProjectgetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (Proj)rd.ToObject(new Proj());
        }
    }


	public delegate void ProjectgetenvidsDelegate(List<string> result, string error);
    public class ProjectgetenvidsRequest {  public List<string> Result=new List<string>();public string Error=""; public Request rq;
        public void Start(ProjectgetenvidsDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ProjectgetenvidsDelegate del = null) { yield return rq.Send(); ProjectgetenvidsDone(this); del?.Invoke(Result, Error); }
    }

    public static ProjectgetenvidsRequest Projectgetenvids(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ProjectgetenvidsRequest rq=new ProjectgetenvidsRequest();
        rq.rq = Client.CreateRequest(ctx, "account_projectgetenvids", input);
        return rq;
    }

    public static void ProjectgetenvidsDone(ProjectgetenvidsRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<string>)rd.ToObject(new List<string>());
        }
    }


	public delegate void ProjectsgetDelegate(List<Proj> result, string error);
    public class ProjectsgetRequest {  public List<Proj> Result=new List<Proj>();public string Error=""; public Request rq;
        public void Start(ProjectsgetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ProjectsgetDelegate del = null) { yield return rq.Send(); ProjectsgetDone(this); del?.Invoke(Result, Error); }
    }

    public static ProjectsgetRequest Projectsget(List<string> input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ProjectsgetRequest rq=new ProjectsgetRequest();
        rq.rq = Client.CreateRequest(ctx, "account_projectsget", input);
        return rq;
    }

    public static void ProjectsgetDone(ProjectsgetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<Proj>)rd.ToObject(new List<Proj>());
        }
    }


	public delegate void ProjectupdateDelegate(string error);
    public class ProjectupdateRequest { public string Error=""; public Request rq;
        public void Start(ProjectupdateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ProjectupdateDelegate del = null) { yield return rq.Send(); ProjectupdateDone(this); del?.Invoke(Error); }
    }

    public static ProjectupdateRequest Projectupdate(Proj input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ProjectupdateRequest rq=new ProjectupdateRequest();
        rq.rq = Client.CreateRequest(ctx, "account_projectupdate", input);
        return rq;
    }

    public static void ProjectupdateDone(ProjectupdateRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void ProjectdeleteDelegate(string error);
    public class ProjectdeleteRequest { public string Error=""; public Request rq;
        public void Start(ProjectdeleteDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ProjectdeleteDelegate del = null) { yield return rq.Send(); ProjectdeleteDone(this); del?.Invoke(Error); }
    }

    public static ProjectdeleteRequest Projectdelete(AccountProjectDeleteIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ProjectdeleteRequest rq=new ProjectdeleteRequest();
        rq.rq = Client.CreateRequest(ctx, "account_projectdelete", input);
        return rq;
    }

    public static void ProjectdeleteDone(ProjectdeleteRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void TeamcreateDelegate(string result, string error);
    public class TeamcreateRequest {  public string Result="";public string Error=""; public Request rq;
        public void Start(TeamcreateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(TeamcreateDelegate del = null) { yield return rq.Send(); TeamcreateDone(this); del?.Invoke(Result, Error); }
    }

    public static TeamcreateRequest Teamcreate(AccountTeamCreateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        TeamcreateRequest rq=new TeamcreateRequest();
        rq.rq = Client.CreateRequest(ctx, "account_teamcreate", input);
        return rq;
    }

    public static void TeamcreateDone(TeamcreateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (string)rd.ToObject("");
        }
    }


	public delegate void TeamgetDelegate(Team result, string error);
    public class TeamgetRequest {  public Team Result=new Team();public string Error=""; public Request rq;
        public void Start(TeamgetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(TeamgetDelegate del = null) { yield return rq.Send(); TeamgetDone(this); del?.Invoke(Result, Error); }
    }

    public static TeamgetRequest Teamget(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        TeamgetRequest rq=new TeamgetRequest();
        rq.rq = Client.CreateRequest(ctx, "account_teamget", input);
        return rq;
    }

    public static void TeamgetDone(TeamgetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (Team)rd.ToObject(new Team());
        }
    }


	public delegate void TeamdeleteDelegate(string error);
    public class TeamdeleteRequest { public string Error=""; public Request rq;
        public void Start(TeamdeleteDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(TeamdeleteDelegate del = null) { yield return rq.Send(); TeamdeleteDone(this); del?.Invoke(Error); }
    }

    public static TeamdeleteRequest Teamdelete(AccountTeamDeleteIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        TeamdeleteRequest rq=new TeamdeleteRequest();
        rq.rq = Client.CreateRequest(ctx, "account_teamdelete", input);
        return rq;
    }

    public static void TeamdeleteDone(TeamdeleteRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void TeamupdateDelegate(string error);
    public class TeamupdateRequest { public string Error=""; public Request rq;
        public void Start(TeamupdateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(TeamupdateDelegate del = null) { yield return rq.Send(); TeamupdateDone(this); del?.Invoke(Error); }
    }

    public static TeamupdateRequest Teamupdate(Team input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        TeamupdateRequest rq=new TeamupdateRequest();
        rq.rq = Client.CreateRequest(ctx, "account_teamupdate", input);
        return rq;
    }

    public static void TeamupdateDone(TeamupdateRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void EnvcreateDelegate(string result, string error);
    public class EnvcreateRequest {  public string Result="";public string Error=""; public Request rq;
        public void Start(EnvcreateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(EnvcreateDelegate del = null) { yield return rq.Send(); EnvcreateDone(this); del?.Invoke(Result, Error); }
    }

    public static EnvcreateRequest Envcreate(AccountEnvCreateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        EnvcreateRequest rq=new EnvcreateRequest();
        rq.rq = Client.CreateRequest(ctx, "account_envcreate", input);
        return rq;
    }

    public static void EnvcreateDone(EnvcreateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (string)rd.ToObject("");
        }
    }


	public delegate void EnvgetDelegate(Env result, string error);
    public class EnvgetRequest {  public Env Result=new Env();public string Error=""; public Request rq;
        public void Start(EnvgetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(EnvgetDelegate del = null) { yield return rq.Send(); EnvgetDone(this); del?.Invoke(Result, Error); }
    }

    public static EnvgetRequest Envget(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        EnvgetRequest rq=new EnvgetRequest();
        rq.rq = Client.CreateRequest(ctx, "account_envget", input);
        return rq;
    }

    public static void EnvgetDone(EnvgetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (Env)rd.ToObject(new Env());
        }
    }


	public delegate void EnvupdateDelegate(string error);
    public class EnvupdateRequest { public string Error=""; public Request rq;
        public void Start(EnvupdateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(EnvupdateDelegate del = null) { yield return rq.Send(); EnvupdateDone(this); del?.Invoke(Error); }
    }

    public static EnvupdateRequest Envupdate(Env input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        EnvupdateRequest rq=new EnvupdateRequest();
        rq.rq = Client.CreateRequest(ctx, "account_envupdate", input);
        return rq;
    }

    public static void EnvupdateDone(EnvupdateRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void EnvsgetDelegate(List<Env> result, string error);
    public class EnvsgetRequest {  public List<Env> Result=new List<Env>();public string Error=""; public Request rq;
        public void Start(EnvsgetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(EnvsgetDelegate del = null) { yield return rq.Send(); EnvsgetDone(this); del?.Invoke(Result, Error); }
    }

    public static EnvsgetRequest Envsget(List<string> input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        EnvsgetRequest rq=new EnvsgetRequest();
        rq.rq = Client.CreateRequest(ctx, "account_envsget", input);
        return rq;
    }

    public static void EnvsgetDone(EnvsgetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<Env>)rd.ToObject(new List<Env>());
        }
    }


	public delegate void EnvdeleteDelegate(string error);
    public class EnvdeleteRequest { public string Error=""; public Request rq;
        public void Start(EnvdeleteDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(EnvdeleteDelegate del = null) { yield return rq.Send(); EnvdeleteDone(this); del?.Invoke(Error); }
    }

    public static EnvdeleteRequest Envdelete(AccountEnvDeleteIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        EnvdeleteRequest rq=new EnvdeleteRequest();
        rq.rq = Client.CreateRequest(ctx, "account_envdelete", input);
        return rq;
    }

    public static void EnvdeleteDone(EnvdeleteRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void EnvserviceupdateDelegate(string error);
    public class EnvserviceupdateRequest { public string Error=""; public Request rq;
        public void Start(EnvserviceupdateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(EnvserviceupdateDelegate del = null) { yield return rq.Send(); EnvserviceupdateDone(this); del?.Invoke(Error); }
    }

    public static EnvserviceupdateRequest Envserviceupdate(ServiceCfg input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        EnvserviceupdateRequest rq=new EnvserviceupdateRequest();
        rq.rq = Client.CreateRequest(ctx, "account_envserviceupdate", input);
        return rq;
    }

    public static void EnvserviceupdateDone(EnvserviceupdateRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void EnvservicedeleteDelegate(string error);
    public class EnvservicedeleteRequest { public string Error=""; public Request rq;
        public void Start(EnvservicedeleteDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(EnvservicedeleteDelegate del = null) { yield return rq.Send(); EnvservicedeleteDone(this); del?.Invoke(Error); }
    }

    public static EnvservicedeleteRequest Envservicedelete(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        EnvservicedeleteRequest rq=new EnvservicedeleteRequest();
        rq.rq = Client.CreateRequest(ctx, "account_envservicedelete", input);
        return rq;
    }

    public static void EnvservicedeleteDone(EnvservicedeleteRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void DevquicksetupDelegate(AccountDevQuickSetupOut result, string error);
    public class DevquicksetupRequest {  public AccountDevQuickSetupOut Result=new AccountDevQuickSetupOut();public string Error=""; public Request rq;
        public void Start(DevquicksetupDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DevquicksetupDelegate del = null) { yield return rq.Send(); DevquicksetupDone(this); del?.Invoke(Result, Error); }
    }

    public static DevquicksetupRequest Devquicksetup(AccountDevQuickSetupIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DevquicksetupRequest rq=new DevquicksetupRequest();
        rq.rq = Client.CreateRequest(ctx, "account_devquicksetup", input);
        return rq;
    }

    public static void DevquicksetupDone(DevquicksetupRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (AccountDevQuickSetupOut)rd.ToObject(new AccountDevQuickSetupOut());
        }
    }


	public delegate void QuotasetDelegate(AccountQuotaInfo result, string error);
    public class QuotasetRequest {  public AccountQuotaInfo Result=new AccountQuotaInfo();public string Error=""; public Request rq;
        public void Start(QuotasetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(QuotasetDelegate del = null) { yield return rq.Send(); QuotasetDone(this); del?.Invoke(Result, Error); }
    }

    public static QuotasetRequest Quotaset(AccountQuotaInfo input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        QuotasetRequest rq=new QuotasetRequest();
        rq.rq = Client.CreateRequest(ctx, "account_quotaset", input);
        return rq;
    }

    public static void QuotasetDone(QuotasetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (AccountQuotaInfo)rd.ToObject(new AccountQuotaInfo());
        }
    }


	public delegate void QuotagetDelegate(AccountQuotaInfo result, string error);
    public class QuotagetRequest {  public AccountQuotaInfo Result=new AccountQuotaInfo();public string Error=""; public Request rq;
        public void Start(QuotagetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(QuotagetDelegate del = null) { yield return rq.Send(); QuotagetDone(this); del?.Invoke(Result, Error); }
    }

    public static QuotagetRequest Quotaget(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        QuotagetRequest rq=new QuotagetRequest();
        rq.rq = Client.CreateRequest(ctx, "account_quotaget", input);
        return rq;
    }

    public static void QuotagetDone(QuotagetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (AccountQuotaInfo)rd.ToObject(new AccountQuotaInfo());
        }
    }


}

} //namespace Zeuz

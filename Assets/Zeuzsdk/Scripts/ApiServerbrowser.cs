// Code generated by "apigen"; DO NOT EDIT.
//Service Serverbrowser
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class ServerBrowserQueryIn
{
	public int ListMax=0; //arg:"" help:"Maximum amount of results to return"
	public int ListOfs=0; //arg:"" help:"Query offset. Return {listmax} entries after specified index"
	public string Filter=""; //arg:"" help:"Query filter"
	public string Compatibility="";
	public string OrderBy=""; //arg:"" help:"Sort results"
	public Dictionary<string,Variant> Params=new Dictionary<string,Variant>();
	public ServerBrowserQueryIn(int _listmax=0,int _listofs=0,string _filter="",string _compatibility="",string _orderby="",Dictionary<string,Variant> _params=null) {ListMax=_listmax;ListOfs=_listofs;Filter=_filter;Compatibility=_compatibility;OrderBy=_orderby;if(_params!=null)Params=_params;}
	public ServerBrowserQueryIn(ServerBrowserQueryIn _copy) { if (_copy == null) return;ListMax=_copy.ListMax;ListOfs=_copy.ListOfs;Filter=_copy.Filter;Compatibility=_copy.Compatibility;OrderBy=_copy.OrderBy;if(_copy.Params!=null)Params=_copy.Params;}
};

public class ServerBrowserStateBase
{
	public string ID="";
	public string ClientAddr="";
	public int UsersCur=0;
	public int UsersMax=0;
	public string Compatibility="";
	public Dictionary<string,Variant> Params=new Dictionary<string,Variant>();
	public ServerBrowserStateBase(string _id="",string _clientaddr="",int _userscur=0,int _usersmax=0,string _compatibility="",Dictionary<string,Variant> _params=null) {ID=_id;ClientAddr=_clientaddr;UsersCur=_userscur;UsersMax=_usersmax;Compatibility=_compatibility;if(_params!=null)Params=_params;}
	public ServerBrowserStateBase(ServerBrowserStateBase _copy) { if (_copy == null) return;ID=_copy.ID;ClientAddr=_copy.ClientAddr;UsersCur=_copy.UsersCur;UsersMax=_copy.UsersMax;Compatibility=_copy.Compatibility;if(_copy.Params!=null)Params=_copy.Params;}
};

public class ServerBrowserStateOut : ServerBrowserStateBase
{
	public Timestamp Created=new Timestamp();
	public Timestamp Updated=new Timestamp();
	public ServerBrowserStateOut(Timestamp _created=new Timestamp(),Timestamp _updated=new Timestamp(),ServerBrowserStateBase _base=null) : base(_base) {Created=_created;Updated=_updated;}
	public ServerBrowserStateOut(ServerBrowserStateOut _copy) { if (_copy == null) return;Created=_copy.Created;Updated=_copy.Updated;}
};

public class ServerBrowserQueryOut
{
	public List<ServerBrowserStateOut> Results=new List<ServerBrowserStateOut>();
	public int ResultOfs=0;
	public int ResultTotal=0;
	public string Errors="";
	public ServerBrowserQueryOut(List<ServerBrowserStateOut> _results=null,int _resultofs=0,int _resulttotal=0,string _errors="") {if(_results!=null)Results=_results;ResultOfs=_resultofs;ResultTotal=_resulttotal;Errors=_errors;}
	public ServerBrowserQueryOut(ServerBrowserQueryOut _copy) { if (_copy == null) return;if(_copy.Results!=null)Results=_copy.Results;ResultOfs=_copy.ResultOfs;ResultTotal=_copy.ResultTotal;Errors=_copy.Errors;}
};

public class ServerBrowserStateIn : ServerBrowserStateBase
{
	public ServerBrowserStateIn(ServerBrowserStateBase _base=null) : base(_base) {}
	public ServerBrowserStateIn(ServerBrowserStateIn _copy) { if (_copy == null) return;}
};


public class ApiServerbrowser
{ 
	public delegate void QueryDelegate(ServerBrowserQueryOut result, string error);
    public class QueryRequest {  public ServerBrowserQueryOut Result=new ServerBrowserQueryOut();public string Error=""; public Request rq;
        public void Start(QueryDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(QueryDelegate del = null) { yield return rq.Send(); QueryDone(this); del?.Invoke(Result, Error); }
    }

    public static QueryRequest Query(ServerBrowserQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        QueryRequest rq=new QueryRequest();
        rq.rq = Client.CreateRequest(ctx, "serverbrowser_query", input);
        return rq;
    }

    public static void QueryDone(QueryRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (ServerBrowserQueryOut)rd.ToObject(new ServerBrowserQueryOut());
        }
    }


	public delegate void RefreshDelegate(string error);
    public class RefreshRequest { public string Error=""; public Request rq;
        public void Start(RefreshDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(RefreshDelegate del = null) { yield return rq.Send(); RefreshDone(this); del?.Invoke(Error); }
    }

    public static RefreshRequest Refresh(ServerBrowserStateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        RefreshRequest rq=new RefreshRequest();
        rq.rq = Client.CreateRequest(ctx, "serverbrowser_refresh", input);
        return rq;
    }

    public static void RefreshDone(RefreshRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void DestroyDelegate(string error);
    public class DestroyRequest { public string Error=""; public Request rq;
        public void Start(DestroyDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DestroyDelegate del = null) { yield return rq.Send(); DestroyDone(this); del?.Invoke(Error); }
    }

    public static DestroyRequest Destroy(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DestroyRequest rq=new DestroyRequest();
        rq.rq = Client.CreateRequest(ctx, "serverbrowser_destroy", input);
        return rq;
    }

    public static void DestroyDone(DestroyRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


}

} //namespace Zeuz

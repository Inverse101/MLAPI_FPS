// Code generated by "apigen"; DO NOT EDIT.
//Service Machine
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class MachinePagination
{
	public bool GetTotal=false;
	public int Offset=0;
	public int Limit=0;
	public string OrderBy=""; //arg:"required" help:"Possible values: <code>'payloadid'</code>, <code>'machineid'</code>, <code>'type'</code>, <code>'status'</code>"
	public bool OrderAsc=false;
	public MachinePagination(bool _gettotal=false,int _offset=0,int _limit=0,string _orderby="",bool _orderasc=false) {GetTotal=_gettotal;Offset=_offset;Limit=_limit;OrderBy=_orderby;OrderAsc=_orderasc;}
	public MachinePagination(MachinePagination _copy) { if (_copy == null) return;GetTotal=_copy.GetTotal;Offset=_copy.Offset;Limit=_copy.Limit;OrderBy=_copy.OrderBy;OrderAsc=_copy.OrderAsc;}
};

public class MachineGetIn : MachinePagination
{
	public string MachineID="";
	public string AllocationID="";
	public string RegionID="";
	public string LocationType="";
	public List<string> Tags=new List<string>();
	public Timestamp Start=new Timestamp();
	public Timestamp End=new Timestamp();
	public MachineGetIn(string _machineid="",string _allocationid="",string _regionid="",string _locationtype="",List<string> _tags=null,Timestamp _start=new Timestamp(),Timestamp _end=new Timestamp(),MachinePagination _base=null) : base(_base) {MachineID=_machineid;AllocationID=_allocationid;RegionID=_regionid;LocationType=_locationtype;if(_tags!=null)Tags=_tags;Start=_start;End=_end;}
	public MachineGetIn(MachineGetIn _copy) { if (_copy == null) return;MachineID=_copy.MachineID;AllocationID=_copy.AllocationID;RegionID=_copy.RegionID;LocationType=_copy.LocationType;if(_copy.Tags!=null)Tags=_copy.Tags;Start=_copy.Start;End=_copy.End;}
};

public class MachineSpec
{
	public string OS=""; //arg:"required" help:"Linux or Windows"
	public int CoreCount=0; //arg:"required" help:"2 - 32"
	public int CoreMhz=0; //arg:"required" help:"900 - 5,200"
	public int MemoryMB=0; //arg:"required" help:"4,096 - 65,536"
	public int StorageGB=0; //arg:"required" help:"5 - 1,000"
	public int IOBandwidthMBps=0; //arg:"required" help:"500 - 6,000"
	public int InetBandwidthMBps=0; //arg:"required" help:"10 - 1,000"
	public MachineSpec(string _os="",int _corecount=0,int _coremhz=0,int _memorymb=0,int _storagegb=0,int _iobandwidthmbps=0,int _inetbandwidthmbps=0) {OS=_os;CoreCount=_corecount;CoreMhz=_coremhz;MemoryMB=_memorymb;StorageGB=_storagegb;IOBandwidthMBps=_iobandwidthmbps;InetBandwidthMBps=_inetbandwidthmbps;}
	public MachineSpec(MachineSpec _copy) { if (_copy == null) return;OS=_copy.OS;CoreCount=_copy.CoreCount;CoreMhz=_copy.CoreMhz;MemoryMB=_copy.MemoryMB;StorageGB=_copy.StorageGB;IOBandwidthMBps=_copy.IOBandwidthMBps;InetBandwidthMBps=_copy.InetBandwidthMBps;}
};

public class MachineInfo
{
	public string MachineID="";
	public string ResourceID="";
	public string LocationID="";
	public string AllocationID="";
	public string AccountID="";
	public MachineSpec Spec=new MachineSpec();
	public string Tags="";
	public string IP="";
	public List<string> Regions=new List<string>();
	public string LocationType="";
	public Timestamp Created=new Timestamp();
	public Timestamp Finished=new Timestamp();
	public MachineInfo(string _machineid="",string _resourceid="",string _locationid="",string _allocationid="",string _accountid="",MachineSpec _spec=null,string _tags="",string _ip="",List<string> _regions=null,string _locationtype="",Timestamp _created=new Timestamp(),Timestamp _finished=new Timestamp()) {MachineID=_machineid;ResourceID=_resourceid;LocationID=_locationid;AllocationID=_allocationid;AccountID=_accountid;if(_spec!=null)Spec=_spec;Tags=_tags;IP=_ip;if(_regions!=null)Regions=_regions;LocationType=_locationtype;Created=_created;Finished=_finished;}
	public MachineInfo(MachineInfo _copy) { if (_copy == null) return;MachineID=_copy.MachineID;ResourceID=_copy.ResourceID;LocationID=_copy.LocationID;AllocationID=_copy.AllocationID;AccountID=_copy.AccountID;if(_copy.Spec!=null)Spec=_copy.Spec;Tags=_copy.Tags;IP=_copy.IP;if(_copy.Regions!=null)Regions=_copy.Regions;LocationType=_copy.LocationType;Created=_copy.Created;Finished=_copy.Finished;}
};

public class MachineGetOut
{
	public List<MachineInfo> Items=new List<MachineInfo>();
	public long Count=0;
	public MachineGetOut(List<MachineInfo> _items=null,long _count=0) {if(_items!=null)Items=_items;Count=_count;}
	public MachineGetOut(MachineGetOut _copy) { if (_copy == null) return;if(_copy.Items!=null)Items=_copy.Items;Count=_copy.Count;}
};

public class MachineResourcesCountIn
{
	public string AccountID="";
	public string Type="";
	public MachineResourcesCountIn(string _accountid="",string _type="") {AccountID=_accountid;Type=_type;}
	public MachineResourcesCountIn(MachineResourcesCountIn _copy) { if (_copy == null) return;AccountID=_copy.AccountID;Type=_copy.Type;}
};

public class MachineResourceGetIn
{
	public List<string> ResourceIDs=new List<string>();
	public string RegionID="";
	public MachineSpec MinSpec=new MachineSpec();
	public List<string> MachineType=new List<string>();
	public List<string> Accounts=new List<string>();
	public List<string> Machines=new List<string>();
	public List<string> Providers=new List<string>();
	public int MinTierLevel=0;
	public bool GetBound=false;
	public bool GetUnbound=false;
	public bool ForAllocation=false;
	public bool ForDeprovisioning=false;
	public MachineResourceGetIn(List<string> _resourceids=null,string _regionid="",MachineSpec _minspec=null,List<string> _machinetype=null,List<string> _accounts=null,List<string> _machines=null,List<string> _providers=null,int _mintierlevel=0,bool _getbound=false,bool _getunbound=false,bool _forallocation=false,bool _fordeprovisioning=false) {if(_resourceids!=null)ResourceIDs=_resourceids;RegionID=_regionid;if(_minspec!=null)MinSpec=_minspec;if(_machinetype!=null)MachineType=_machinetype;if(_accounts!=null)Accounts=_accounts;if(_machines!=null)Machines=_machines;if(_providers!=null)Providers=_providers;MinTierLevel=_mintierlevel;GetBound=_getbound;GetUnbound=_getunbound;ForAllocation=_forallocation;ForDeprovisioning=_fordeprovisioning;}
	public MachineResourceGetIn(MachineResourceGetIn _copy) { if (_copy == null) return;if(_copy.ResourceIDs!=null)ResourceIDs=_copy.ResourceIDs;RegionID=_copy.RegionID;if(_copy.MinSpec!=null)MinSpec=_copy.MinSpec;if(_copy.MachineType!=null)MachineType=_copy.MachineType;if(_copy.Accounts!=null)Accounts=_copy.Accounts;if(_copy.Machines!=null)Machines=_copy.Machines;if(_copy.Providers!=null)Providers=_copy.Providers;MinTierLevel=_copy.MinTierLevel;GetBound=_copy.GetBound;GetUnbound=_copy.GetUnbound;ForAllocation=_copy.ForAllocation;ForDeprovisioning=_copy.ForDeprovisioning;}
};

public class MachineResourceInfo
{
	public string ResourceID="";
	public string LocationID="";
	public MachineSpec Spec=new MachineSpec();
	public string Provider="";
	public string Hostname="";
	public string IP="";
	public bool IgnoreOnAlloc=false;
	public bool Bound=false;
	public string MachineID="";
	public string AccountID="";
	public int TierLevel=0;
	public string Tags="";
	public string ProvisionJobID="";
	public string ResourceClusterID="";
	public string NodeID="";
	public bool AllocatingDisabled=false;
	public MachineResourceInfo(string _resourceid="",string _locationid="",MachineSpec _spec=null,string _provider="",string _hostname="",string _ip="",bool _ignoreonalloc=false,bool _bound=false,string _machineid="",string _accountid="",int _tierlevel=0,string _tags="",string _provisionjobid="",string _resourceclusterid="",string _nodeid="",bool _allocatingdisabled=false) {ResourceID=_resourceid;LocationID=_locationid;if(_spec!=null)Spec=_spec;Provider=_provider;Hostname=_hostname;IP=_ip;IgnoreOnAlloc=_ignoreonalloc;Bound=_bound;MachineID=_machineid;AccountID=_accountid;TierLevel=_tierlevel;Tags=_tags;ProvisionJobID=_provisionjobid;ResourceClusterID=_resourceclusterid;NodeID=_nodeid;AllocatingDisabled=_allocatingdisabled;}
	public MachineResourceInfo(MachineResourceInfo _copy) { if (_copy == null) return;ResourceID=_copy.ResourceID;LocationID=_copy.LocationID;if(_copy.Spec!=null)Spec=_copy.Spec;Provider=_copy.Provider;Hostname=_copy.Hostname;IP=_copy.IP;IgnoreOnAlloc=_copy.IgnoreOnAlloc;Bound=_copy.Bound;MachineID=_copy.MachineID;AccountID=_copy.AccountID;TierLevel=_copy.TierLevel;Tags=_copy.Tags;ProvisionJobID=_copy.ProvisionJobID;ResourceClusterID=_copy.ResourceClusterID;NodeID=_copy.NodeID;AllocatingDisabled=_copy.AllocatingDisabled;}
};

public class MachineResourceDataIn
{
	public string LocationID="";
	public MachineSpec Spec=new MachineSpec();
	public string Hostname="";
	public string Provider="";
	public string IP="";
	public bool IgnoreOnAlloc=false;
	public string AccountID="";
	public int TierLevel=0;
	public string Tags="";
	public string ResourceClusterID="";
	public string NodeID="";
	public bool AllocatingDisabled=false;
	public MachineResourceDataIn(string _locationid="",MachineSpec _spec=null,string _hostname="",string _provider="",string _ip="",bool _ignoreonalloc=false,string _accountid="",int _tierlevel=0,string _tags="",string _resourceclusterid="",string _nodeid="",bool _allocatingdisabled=false) {LocationID=_locationid;if(_spec!=null)Spec=_spec;Hostname=_hostname;Provider=_provider;IP=_ip;IgnoreOnAlloc=_ignoreonalloc;AccountID=_accountid;TierLevel=_tierlevel;Tags=_tags;ResourceClusterID=_resourceclusterid;NodeID=_nodeid;AllocatingDisabled=_allocatingdisabled;}
	public MachineResourceDataIn(MachineResourceDataIn _copy) { if (_copy == null) return;LocationID=_copy.LocationID;if(_copy.Spec!=null)Spec=_copy.Spec;Hostname=_copy.Hostname;Provider=_copy.Provider;IP=_copy.IP;IgnoreOnAlloc=_copy.IgnoreOnAlloc;AccountID=_copy.AccountID;TierLevel=_copy.TierLevel;Tags=_copy.Tags;ResourceClusterID=_copy.ResourceClusterID;NodeID=_copy.NodeID;AllocatingDisabled=_copy.AllocatingDisabled;}
};

public class MachineResourceUpdateIn
{
	public string ResourceID="";
	public MachineResourceDataIn Data=new MachineResourceDataIn();
	public MachineResourceUpdateIn(string _resourceid="",MachineResourceDataIn _data=null) {ResourceID=_resourceid;if(_data!=null)Data=_data;}
	public MachineResourceUpdateIn(MachineResourceUpdateIn _copy) { if (_copy == null) return;ResourceID=_copy.ResourceID;if(_copy.Data!=null)Data=_copy.Data;}
};

public class MachineResourceDeprovisionIn
{
	public string AllocationID="";
	public List<string> Resources=new List<string>();
	public MachineResourceDeprovisionIn(string _allocationid="",List<string> _resources=null) {AllocationID=_allocationid;if(_resources!=null)Resources=_resources;}
	public MachineResourceDeprovisionIn(MachineResourceDeprovisionIn _copy) { if (_copy == null) return;AllocationID=_copy.AllocationID;if(_copy.Resources!=null)Resources=_copy.Resources;}
};

public class MachineTagsSetIn
{
	public string ID="";
	public string Tags="";
	public MachineTagsSetIn(string _id="",string _tags="") {ID=_id;Tags=_tags;}
	public MachineTagsSetIn(MachineTagsSetIn _copy) { if (_copy == null) return;ID=_copy.ID;Tags=_copy.Tags;}
};

public class MachineResourceAllocateIn
{
	public string AllocationID="";
	public List<string> Resources=new List<string>();
	public MachineResourceAllocateIn(string _allocationid="",List<string> _resources=null) {AllocationID=_allocationid;if(_resources!=null)Resources=_resources;}
	public MachineResourceAllocateIn(MachineResourceAllocateIn _copy) { if (_copy == null) return;AllocationID=_copy.AllocationID;if(_copy.Resources!=null)Resources=_copy.Resources;}
};

public class MachineResourceDeallocateIn
{
	public string AllocationID="";
	public List<string> Machines=new List<string>();
	public MachineResourceDeallocateIn(string _allocationid="",List<string> _machines=null) {AllocationID=_allocationid;if(_machines!=null)Machines=_machines;}
	public MachineResourceDeallocateIn(MachineResourceDeallocateIn _copy) { if (_copy == null) return;AllocationID=_copy.AllocationID;if(_copy.Machines!=null)Machines=_copy.Machines;}
};

public class MachineResourcesDrainIn
{
	public List<string> Resources=new List<string>();
	public MachineResourcesDrainIn(List<string> _resources=null) {if(_resources!=null)Resources=_resources;}
	public MachineResourcesDrainIn(MachineResourcesDrainIn _copy) { if (_copy == null) return;if(_copy.Resources!=null)Resources=_copy.Resources;}
};


public class ApiMachine
{ 
	public delegate void GetDelegate(MachineGetOut result, string error);
    public class GetRequest {  public MachineGetOut Result=new MachineGetOut();public string Error=""; public Request rq;
        public void Start(GetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(GetDelegate del = null) { yield return rq.Send(); GetDone(this); del?.Invoke(Result, Error); }
    }

    public static GetRequest Get(MachineGetIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        GetRequest rq=new GetRequest();
        rq.rq = Client.CreateRequest(ctx, "machine_get", input);
        return rq;
    }

    public static void GetDone(GetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (MachineGetOut)rd.ToObject(new MachineGetOut());
        }
    }


	public delegate void GetinfoDelegate(List<MachineInfo> result, string error);
    public class GetinfoRequest {  public List<MachineInfo> Result=new List<MachineInfo>();public string Error=""; public Request rq;
        public void Start(GetinfoDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(GetinfoDelegate del = null) { yield return rq.Send(); GetinfoDone(this); del?.Invoke(Result, Error); }
    }

    public static GetinfoRequest Getinfo(List<string> input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        GetinfoRequest rq=new GetinfoRequest();
        rq.rq = Client.CreateRequest(ctx, "machine_getinfo", input);
        return rq;
    }

    public static void GetinfoDone(GetinfoRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<MachineInfo>)rd.ToObject(new List<MachineInfo>());
        }
    }


	public delegate void CountresourcesDelegate(long result, string error);
    public class CountresourcesRequest {  public long Result=0;public string Error=""; public Request rq;
        public void Start(CountresourcesDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CountresourcesDelegate del = null) { yield return rq.Send(); CountresourcesDone(this); del?.Invoke(Result, Error); }
    }

    public static CountresourcesRequest Countresources(MachineResourcesCountIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CountresourcesRequest rq=new CountresourcesRequest();
        rq.rq = Client.CreateRequest(ctx, "machine_countresources", input);
        return rq;
    }

    public static void CountresourcesDone(CountresourcesRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (long)rd.ToObject(0);
        }
    }


	public delegate void GetresourcesDelegate(List<MachineResourceInfo> result, string error);
    public class GetresourcesRequest {  public List<MachineResourceInfo> Result=new List<MachineResourceInfo>();public string Error=""; public Request rq;
        public void Start(GetresourcesDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(GetresourcesDelegate del = null) { yield return rq.Send(); GetresourcesDone(this); del?.Invoke(Result, Error); }
    }

    public static GetresourcesRequest Getresources(MachineResourceGetIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        GetresourcesRequest rq=new GetresourcesRequest();
        rq.rq = Client.CreateRequest(ctx, "machine_getresources", input);
        return rq;
    }

    public static void GetresourcesDone(GetresourcesRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<MachineResourceInfo>)rd.ToObject(new List<MachineResourceInfo>());
        }
    }


	public delegate void AddresourceDelegate(MachineResourceInfo result, string error);
    public class AddresourceRequest {  public MachineResourceInfo Result=new MachineResourceInfo();public string Error=""; public Request rq;
        public void Start(AddresourceDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(AddresourceDelegate del = null) { yield return rq.Send(); AddresourceDone(this); del?.Invoke(Result, Error); }
    }

    public static AddresourceRequest Addresource(MachineResourceDataIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        AddresourceRequest rq=new AddresourceRequest();
        rq.rq = Client.CreateRequest(ctx, "machine_addresource", input);
        return rq;
    }

    public static void AddresourceDone(AddresourceRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (MachineResourceInfo)rd.ToObject(new MachineResourceInfo());
        }
    }


	public delegate void UpdateresourceDelegate(MachineResourceInfo result, string error);
    public class UpdateresourceRequest {  public MachineResourceInfo Result=new MachineResourceInfo();public string Error=""; public Request rq;
        public void Start(UpdateresourceDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(UpdateresourceDelegate del = null) { yield return rq.Send(); UpdateresourceDone(this); del?.Invoke(Result, Error); }
    }

    public static UpdateresourceRequest Updateresource(MachineResourceUpdateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        UpdateresourceRequest rq=new UpdateresourceRequest();
        rq.rq = Client.CreateRequest(ctx, "machine_updateresource", input);
        return rq;
    }

    public static void UpdateresourceDone(UpdateresourceRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (MachineResourceInfo)rd.ToObject(new MachineResourceInfo());
        }
    }


	public delegate void ResourcedeprovisionDelegate(string error);
    public class ResourcedeprovisionRequest { public string Error=""; public Request rq;
        public void Start(ResourcedeprovisionDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ResourcedeprovisionDelegate del = null) { yield return rq.Send(); ResourcedeprovisionDone(this); del?.Invoke(Error); }
    }

    public static ResourcedeprovisionRequest Resourcedeprovision(MachineResourceDeprovisionIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ResourcedeprovisionRequest rq=new ResourcedeprovisionRequest();
        rq.rq = Client.CreateRequest(ctx, "machine_resourcedeprovision", input);
        return rq;
    }

    public static void ResourcedeprovisionDone(ResourcedeprovisionRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void SettagsDelegate(List<MachineTagsSetIn> result, string error);
    public class SettagsRequest {  public List<MachineTagsSetIn> Result=new List<MachineTagsSetIn>();public string Error=""; public Request rq;
        public void Start(SettagsDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(SettagsDelegate del = null) { yield return rq.Send(); SettagsDone(this); del?.Invoke(Result, Error); }
    }

    public static SettagsRequest Settags(List<MachineTagsSetIn> input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        SettagsRequest rq=new SettagsRequest();
        rq.rq = Client.CreateRequest(ctx, "machine_settags", input);
        return rq;
    }

    public static void SettagsDone(SettagsRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<MachineTagsSetIn>)rd.ToObject(new List<MachineTagsSetIn>());
        }
    }


	public delegate void GettagsDelegate(List<MachineTagsSetIn> result, string error);
    public class GettagsRequest {  public List<MachineTagsSetIn> Result=new List<MachineTagsSetIn>();public string Error=""; public Request rq;
        public void Start(GettagsDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(GettagsDelegate del = null) { yield return rq.Send(); GettagsDone(this); del?.Invoke(Result, Error); }
    }

    public static GettagsRequest Gettags(List<string> input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        GettagsRequest rq=new GettagsRequest();
        rq.rq = Client.CreateRequest(ctx, "machine_gettags", input);
        return rq;
    }

    public static void GettagsDone(GettagsRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<MachineTagsSetIn>)rd.ToObject(new List<MachineTagsSetIn>());
        }
    }


	public delegate void AllocateDelegate(List<MachineInfo> result, string error);
    public class AllocateRequest {  public List<MachineInfo> Result=new List<MachineInfo>();public string Error=""; public Request rq;
        public void Start(AllocateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(AllocateDelegate del = null) { yield return rq.Send(); AllocateDone(this); del?.Invoke(Result, Error); }
    }

    public static AllocateRequest Allocate(MachineResourceAllocateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        AllocateRequest rq=new AllocateRequest();
        rq.rq = Client.CreateRequest(ctx, "machine_allocate", input);
        return rq;
    }

    public static void AllocateDone(AllocateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<MachineInfo>)rd.ToObject(new List<MachineInfo>());
        }
    }


	public delegate void DeallocateDelegate(List<string> result, string error);
    public class DeallocateRequest {  public List<string> Result=new List<string>();public string Error=""; public Request rq;
        public void Start(DeallocateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DeallocateDelegate del = null) { yield return rq.Send(); DeallocateDone(this); del?.Invoke(Result, Error); }
    }

    public static DeallocateRequest Deallocate(MachineResourceDeallocateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DeallocateRequest rq=new DeallocateRequest();
        rq.rq = Client.CreateRequest(ctx, "machine_deallocate", input);
        return rq;
    }

    public static void DeallocateDone(DeallocateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<string>)rd.ToObject(new List<string>());
        }
    }


	public delegate void ResourcesdrainDelegate(bool result, string error);
    public class ResourcesdrainRequest {  public bool Result=false;public string Error=""; public Request rq;
        public void Start(ResourcesdrainDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ResourcesdrainDelegate del = null) { yield return rq.Send(); ResourcesdrainDone(this); del?.Invoke(Result, Error); }
    }

    public static ResourcesdrainRequest Resourcesdrain(MachineResourcesDrainIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ResourcesdrainRequest rq=new ResourcesdrainRequest();
        rq.rq = Client.CreateRequest(ctx, "machine_resourcesdrain", input);
        return rq;
    }

    public static void ResourcesdrainDone(ResourcesdrainRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (bool)rd.ToObject(false);
        }
    }


}

} //namespace Zeuz

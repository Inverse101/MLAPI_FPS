// Code generated by "apigen"; DO NOT EDIT.
//Service Imagemanager
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class ImagemanagerManifestEntryPart
{
	public string Hash=""; //json:"checksum"
	public string URL=""; //json:"url"
	public long Index=0; //json:"index"
	public long StartByte=0; //json:"startbyte"
	public long Length=0; //json:"length"
	public ImagemanagerManifestEntryPart(string _hash="",string _url="",long _index=0,long _startbyte=0,long _length=0) {Hash=_hash;URL=_url;Index=_index;StartByte=_startbyte;Length=_length;}
	public ImagemanagerManifestEntryPart(ImagemanagerManifestEntryPart _copy) { if (_copy == null) return;Hash=_copy.Hash;URL=_copy.URL;Index=_copy.Index;StartByte=_copy.StartByte;Length=_copy.Length;}
};

public class ImagemanagerManifestEntry
{
	public string Filename=""; //json:"filename"
	public long Filesize=0; //json:"filesize"
	public string Hash=""; //json:"checksum"
	public string URL=""; //json:"url"
	public List<ImagemanagerManifestEntryPart> Parts=new List<ImagemanagerManifestEntryPart>(); //json:"parts"
	public ImagemanagerManifestEntry(string _filename="",long _filesize=0,string _hash="",string _url="",List<ImagemanagerManifestEntryPart> _parts=null) {Filename=_filename;Filesize=_filesize;Hash=_hash;URL=_url;if(_parts!=null)Parts=_parts;}
	public ImagemanagerManifestEntry(ImagemanagerManifestEntry _copy) { if (_copy == null) return;Filename=_copy.Filename;Filesize=_copy.Filesize;Hash=_copy.Hash;URL=_copy.URL;if(_copy.Parts!=null)Parts=_copy.Parts;}
};

public class ImagemanagerManifest
{
	public List<ImagemanagerManifestEntry> Entries=new List<ImagemanagerManifestEntry>(); //json:"entries"
	public ImagemanagerManifest(List<ImagemanagerManifestEntry> _entries=null) {if(_entries!=null)Entries=_entries;}
	public ImagemanagerManifest(ImagemanagerManifest _copy) { if (_copy == null) return;if(_copy.Entries!=null)Entries=_copy.Entries;}
};

public class ImageManagerPushPullOutput
{
	public ImagemanagerManifest Manifest=new ImagemanagerManifest();
	public string ManifestHash="";
	public List<string> TransferHashes=new List<string>();
	public ImageManagerPushPullOutput(ImagemanagerManifest _manifest=null,string _manifesthash="",List<string> _transferhashes=null) {if(_manifest!=null)Manifest=_manifest;ManifestHash=_manifesthash;if(_transferhashes!=null)TransferHashes=_transferhashes;}
	public ImageManagerPushPullOutput(ImageManagerPushPullOutput _copy) { if (_copy == null) return;if(_copy.Manifest!=null)Manifest=_copy.Manifest;ManifestHash=_copy.ManifestHash;if(_copy.TransferHashes!=null)TransferHashes=_copy.TransferHashes;}
};

public class ImagemanagerPresignedFileUrlIn
{
	public string ManifestHash=""; //json:"manifestHash"
	public string Filename=""; //json:"filename"
	public ImagemanagerPresignedFileUrlIn(string _manifesthash="",string _filename="") {ManifestHash=_manifesthash;Filename=_filename;}
	public ImagemanagerPresignedFileUrlIn(ImagemanagerPresignedFileUrlIn _copy) { if (_copy == null) return;ManifestHash=_copy.ManifestHash;Filename=_copy.Filename;}
};

public class ImagemanagerPublishInput
{
	public string Description="";
	public string Version="";
	public ImagemanagerPublishInput(string _description="",string _version="") {Description=_description;Version=_version;}
	public ImagemanagerPublishInput(ImagemanagerPublishInput _copy) { if (_copy == null) return;Description=_copy.Description;Version=_copy.Version;}
};

public class ImagemanagerPublishOutput
{
	public string ImageHash=""; //json:"imagehash"
	public string ImageURL=""; //json:"imageurl"
	public string Version=""; //json:"imageversion"
	public string Description=""; //json:"imagedescription"
	public ImagemanagerPublishOutput(string _imagehash="",string _imageurl="",string _version="",string _description="") {ImageHash=_imagehash;ImageURL=_imageurl;Version=_version;Description=_description;}
	public ImagemanagerPublishOutput(ImagemanagerPublishOutput _copy) { if (_copy == null) return;ImageHash=_copy.ImageHash;ImageURL=_copy.ImageURL;Version=_copy.Version;Description=_copy.Description;}
};

public class ImagemanagerPublishState
{
	public string ImageID="";
	public string ImageHash="";
	public string State="";
	public string Message="";
	public ImagemanagerPublishOutput Result=new ImagemanagerPublishOutput();
	public ImagemanagerPublishState(string _imageid="",string _imagehash="",string _state="",string _message="",ImagemanagerPublishOutput _result=null) {ImageID=_imageid;ImageHash=_imagehash;State=_state;Message=_message;if(_result!=null)Result=_result;}
	public ImagemanagerPublishState(ImagemanagerPublishState _copy) { if (_copy == null) return;ImageID=_copy.ImageID;ImageHash=_copy.ImageHash;State=_copy.State;Message=_copy.Message;if(_copy.Result!=null)Result=_copy.Result;}
};

public class ImagemanagerListEntry
{
	public Timestamp Timestamp=new Timestamp();
	public string ImageHash="";
	public string ImageURL="";
	public string Title="";
	public string Version="";
	public ImagemanagerListEntry(Timestamp _timestamp=new Timestamp(),string _imagehash="",string _imageurl="",string _title="",string _version="") {Timestamp=_timestamp;ImageHash=_imagehash;ImageURL=_imageurl;Title=_title;Version=_version;}
	public ImagemanagerListEntry(ImagemanagerListEntry _copy) { if (_copy == null) return;Timestamp=_copy.Timestamp;ImageHash=_copy.ImageHash;ImageURL=_copy.ImageURL;Title=_copy.Title;Version=_copy.Version;}
};

public class ImageManagerPullInput
{
	public string ImageHash=""; //json:"imagehash"
	public ImageManagerPullInput(string _imagehash="") {ImageHash=_imagehash;}
	public ImageManagerPullInput(ImageManagerPullInput _copy) { if (_copy == null) return;ImageHash=_copy.ImageHash;}
};


public class ApiImagemanager
{ 
	public delegate void PushDelegate(ImageManagerPushPullOutput result, string error);
    public class PushRequest {  public ImageManagerPushPullOutput Result=new ImageManagerPushPullOutput();public string Error=""; public Request rq;
        public void Start(PushDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PushDelegate del = null) { yield return rq.Send(); PushDone(this); del?.Invoke(Result, Error); }
    }

    public static PushRequest Push(ImagemanagerManifest input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PushRequest rq=new PushRequest();
        rq.rq = Client.CreateRequest(ctx, "imagemanager_push", input);
        return rq;
    }

    public static void PushDone(PushRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (ImageManagerPushPullOutput)rd.ToObject(new ImageManagerPushPullOutput());
        }
    }


	public delegate void PushV2Delegate(ImageManagerPushPullOutput result, string error);
    public class PushV2Request {  public ImageManagerPushPullOutput Result=new ImageManagerPushPullOutput();public string Error=""; public Request rq;
        public void Start(PushV2Delegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PushV2Delegate del = null) { yield return rq.Send(); PushV2Done(this); del?.Invoke(Result, Error); }
    }

    public static PushV2Request PushV2(ImagemanagerManifest input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PushV2Request rq=new PushV2Request();
        rq.rq = Client.CreateRequest(ctx, "imagemanager_pushV2", input);
        return rq;
    }

    public static void PushV2Done(PushV2Request rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (ImageManagerPushPullOutput)rd.ToObject(new ImageManagerPushPullOutput());
        }
    }


	public delegate void PushFileUrlDelegate(string result, string error);
    public class PushFileUrlRequest {  public string Result="";public string Error=""; public Request rq;
        public void Start(PushFileUrlDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PushFileUrlDelegate del = null) { yield return rq.Send(); PushFileUrlDone(this); del?.Invoke(Result, Error); }
    }

    public static PushFileUrlRequest PushFileUrl(ImagemanagerPresignedFileUrlIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PushFileUrlRequest rq=new PushFileUrlRequest();
        rq.rq = Client.CreateRequest(ctx, "imagemanager_push_file_url", input);
        return rq;
    }

    public static void PushFileUrlDone(PushFileUrlRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (string)rd.ToObject("");
        }
    }


	public delegate void DiscardDelegate(string error);
    public class DiscardRequest { public string Error=""; public Request rq;
        public void Start(DiscardDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DiscardDelegate del = null) { yield return rq.Send(); DiscardDone(this); del?.Invoke(Error); }
    }

    public static DiscardRequest Discard( Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DiscardRequest rq=new DiscardRequest();
        rq.rq = Client.CreateRequest(ctx, "imagemanager_discard", null);
        return rq;
    }

    public static void DiscardDone(DiscardRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void PublishDelegate(ImagemanagerPublishState result, string error);
    public class PublishRequest {  public ImagemanagerPublishState Result=new ImagemanagerPublishState();public string Error=""; public Request rq;
        public void Start(PublishDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PublishDelegate del = null) { yield return rq.Send(); PublishDone(this); del?.Invoke(Result, Error); }
    }

    public static PublishRequest Publish(ImagemanagerPublishInput input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PublishRequest rq=new PublishRequest();
        rq.rq = Client.CreateRequest(ctx, "imagemanager_publish", input);
        return rq;
    }

    public static void PublishDone(PublishRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (ImagemanagerPublishState)rd.ToObject(new ImagemanagerPublishState());
        }
    }


	public delegate void ListDelegate(List<ImagemanagerListEntry> result, string error);
    public class ListRequest {  public List<ImagemanagerListEntry> Result=new List<ImagemanagerListEntry>();public string Error=""; public Request rq;
        public void Start(ListDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ListDelegate del = null) { yield return rq.Send(); ListDone(this); del?.Invoke(Result, Error); }
    }

    public static ListRequest List( Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ListRequest rq=new ListRequest();
        rq.rq = Client.CreateRequest(ctx, "imagemanager_list", null);
        return rq;
    }

    public static void ListDone(ListRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<ImagemanagerListEntry>)rd.ToObject(new List<ImagemanagerListEntry>());
        }
    }


	public delegate void GetpublishstateDelegate(ImagemanagerPublishState result, string error);
    public class GetpublishstateRequest {  public ImagemanagerPublishState Result=new ImagemanagerPublishState();public string Error=""; public Request rq;
        public void Start(GetpublishstateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(GetpublishstateDelegate del = null) { yield return rq.Send(); GetpublishstateDone(this); del?.Invoke(Result, Error); }
    }

    public static GetpublishstateRequest Getpublishstate(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        GetpublishstateRequest rq=new GetpublishstateRequest();
        rq.rq = Client.CreateRequest(ctx, "imagemanager_getpublishstate", input);
        return rq;
    }

    public static void GetpublishstateDone(GetpublishstateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (ImagemanagerPublishState)rd.ToObject(new ImagemanagerPublishState());
        }
    }


	public delegate void PullDelegate(ImageManagerPushPullOutput result, string error);
    public class PullRequest {  public ImageManagerPushPullOutput Result=new ImageManagerPushPullOutput();public string Error=""; public Request rq;
        public void Start(PullDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PullDelegate del = null) { yield return rq.Send(); PullDone(this); del?.Invoke(Result, Error); }
    }

    public static PullRequest Pull(ImageManagerPullInput input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PullRequest rq=new PullRequest();
        rq.rq = Client.CreateRequest(ctx, "imagemanager_pull", input);
        return rq;
    }

    public static void PullDone(PullRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (ImageManagerPushPullOutput)rd.ToObject(new ImageManagerPushPullOutput());
        }
    }


	public delegate void PullV2Delegate(ImageManagerPushPullOutput result, string error);
    public class PullV2Request {  public ImageManagerPushPullOutput Result=new ImageManagerPushPullOutput();public string Error=""; public Request rq;
        public void Start(PullV2Delegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PullV2Delegate del = null) { yield return rq.Send(); PullV2Done(this); del?.Invoke(Result, Error); }
    }

    public static PullV2Request PullV2(ImageManagerPullInput input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PullV2Request rq=new PullV2Request();
        rq.rq = Client.CreateRequest(ctx, "imagemanager_pullV2", input);
        return rq;
    }

    public static void PullV2Done(PullV2Request rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (ImageManagerPushPullOutput)rd.ToObject(new ImageManagerPushPullOutput());
        }
    }


	public delegate void PullFileUrlDelegate(string result, string error);
    public class PullFileUrlRequest {  public string Result="";public string Error=""; public Request rq;
        public void Start(PullFileUrlDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PullFileUrlDelegate del = null) { yield return rq.Send(); PullFileUrlDone(this); del?.Invoke(Result, Error); }
    }

    public static PullFileUrlRequest PullFileUrl(ImagemanagerPresignedFileUrlIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PullFileUrlRequest rq=new PullFileUrlRequest();
        rq.rq = Client.CreateRequest(ctx, "imagemanager_pull_file_url", input);
        return rq;
    }

    public static void PullFileUrlDone(PullFileUrlRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (string)rd.ToObject("");
        }
    }


}

} //namespace Zeuz

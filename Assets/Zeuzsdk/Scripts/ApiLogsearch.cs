// Code generated by "apigen"; DO NOT EDIT.
//Service Logsearch
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class LogsearchAccountIn
{
	public Timestamp Start=new Timestamp(); //arg:"required" help:"Start date"
	public Timestamp End=new Timestamp(); //arg:"required" help:"End date"
	public string Level=""; //arg:"optional" help:"Log severity level. Accepted values are <code>0</code> (Spam), <code>1</code> (Trace), <code>2</code> (Debug), <code>3</code> (Info), <code>4</code> (Warn), <code>5</code> (Error), <code>6</code> (Fatal) or empty string."
	public string Payload=""; //arg:"optional" help:"Payload ID"
	public string Query=""; //arg:"optional" help:"Search in message, payloadid, machineid via [Elasticsearch simple query format](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html)"
	public string OrderBy=""; //arg:"optional" help:"Used for sorting the results by. Possible values: timestamp, level."
	public bool OrderAsc=false; //arg:"optional" help:"If set the results will be sorted ascending, else descending."
	public int LastLevel=0; //arg:"optional" help:"Used by the search_after feature in Elasticsearch. If set, Elasticsearch will return the next set of records immediately after the record that has <code>level = LastLevel</code>. Requires <code>LastTime</code> to be also present."
	public long LastTime=0; //arg:"optional" help:"Used by the search_after feature in Elasticsearch. If set, Elasticsearch will return the next set of records immediately after the record that has <code>_timestamp = LastTime</code>."
	public LogsearchAccountIn(Timestamp _start=new Timestamp(),Timestamp _end=new Timestamp(),string _level="",string _payload="",string _query="",string _orderby="",bool _orderasc=false,int _lastlevel=0,long _lasttime=0) {Start=_start;End=_end;Level=_level;Payload=_payload;Query=_query;OrderBy=_orderby;OrderAsc=_orderasc;LastLevel=_lastlevel;LastTime=_lasttime;}
	public LogsearchAccountIn(LogsearchAccountIn _copy) { if (_copy == null) return;Start=_copy.Start;End=_copy.End;Level=_copy.Level;Payload=_copy.Payload;Query=_copy.Query;OrderBy=_copy.OrderBy;OrderAsc=_copy.OrderAsc;LastLevel=_copy.LastLevel;LastTime=_copy.LastTime;}
};

public class LogsearchAccountLog
{
	public string ID="";
	public long Time=0;
	public string Message="";
	public long Level=0;
	public string Subroutine="";
	public string Container="";
	public string Proj="";
	public string Env="";
	public string Allocation="";
	public string Payload="";
	public string Machine="";
	public LogsearchAccountLog(string _id="",long _time=0,string _message="",long _level=0,string _subroutine="",string _container="",string _proj="",string _env="",string _allocation="",string _payload="",string _machine="") {ID=_id;Time=_time;Message=_message;Level=_level;Subroutine=_subroutine;Container=_container;Proj=_proj;Env=_env;Allocation=_allocation;Payload=_payload;Machine=_machine;}
	public LogsearchAccountLog(LogsearchAccountLog _copy) { if (_copy == null) return;ID=_copy.ID;Time=_copy.Time;Message=_copy.Message;Level=_copy.Level;Subroutine=_copy.Subroutine;Container=_copy.Container;Proj=_copy.Proj;Env=_copy.Env;Allocation=_copy.Allocation;Payload=_copy.Payload;Machine=_copy.Machine;}
};

public class LogsearchAccountOut
{
	public List<LogsearchAccountLog> Logs=new List<LogsearchAccountLog>(); //help:"Array containing the actual log entries."
	public long Total=0; //help:"Total amount of LogsearchAccountLog entries available respecting the given filters"
	public LogsearchAccountOut(List<LogsearchAccountLog> _logs=null,long _total=0) {if(_logs!=null)Logs=_logs;Total=_total;}
	public LogsearchAccountOut(LogsearchAccountOut _copy) { if (_copy == null) return;if(_copy.Logs!=null)Logs=_copy.Logs;Total=_copy.Total;}
};

public class LogsearchExpandIn
{
	public long LogTime=0; //arg:"required" help:"Unix timestamp of the expanding log entry."
	public string Payload=""; //arg:"required" help:"Payload ID"
	public bool After=false; //arg:"required" help:"Set if client wants to retrieve the logs after current entry, else before."
	public LogsearchExpandIn(long _logtime=0,string _payload="",bool _after=false) {LogTime=_logtime;Payload=_payload;After=_after;}
	public LogsearchExpandIn(LogsearchExpandIn _copy) { if (_copy == null) return;LogTime=_copy.LogTime;Payload=_copy.Payload;After=_copy.After;}
};

public class LogsearchLogsStatus
{
	public string Status="";
	public int Step=0;
	public int Total=0;
	public LogsearchLogsStatus(string _status="",int _step=0,int _total=0) {Status=_status;Step=_step;Total=_total;}
	public LogsearchLogsStatus(LogsearchLogsStatus _copy) { if (_copy == null) return;Status=_copy.Status;Step=_copy.Step;Total=_copy.Total;}
};


public class ApiLogsearch
{ 
	public delegate void AccountDelegate(LogsearchAccountOut result, string error);
    public class AccountRequest {  public LogsearchAccountOut Result=new LogsearchAccountOut();public string Error=""; public Request rq;
        public void Start(AccountDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(AccountDelegate del = null) { yield return rq.Send(); AccountDone(this); del?.Invoke(Result, Error); }
    }

    public static AccountRequest Account(LogsearchAccountIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        AccountRequest rq=new AccountRequest();
        rq.rq = Client.CreateRequest(ctx, "logsearch_account", input);
        return rq;
    }

    public static void AccountDone(AccountRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (LogsearchAccountOut)rd.ToObject(new LogsearchAccountOut());
        }
    }


	public delegate void ExpandDelegate(LogsearchAccountOut result, string error);
    public class ExpandRequest {  public LogsearchAccountOut Result=new LogsearchAccountOut();public string Error=""; public Request rq;
        public void Start(ExpandDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ExpandDelegate del = null) { yield return rq.Send(); ExpandDone(this); del?.Invoke(Result, Error); }
    }

    public static ExpandRequest Expand(LogsearchExpandIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ExpandRequest rq=new ExpandRequest();
        rq.rq = Client.CreateRequest(ctx, "logsearch_expand", input);
        return rq;
    }

    public static void ExpandDone(ExpandRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (LogsearchAccountOut)rd.ToObject(new LogsearchAccountOut());
        }
    }


	public delegate void StartexportDelegate(string result, string error);
    public class StartexportRequest {  public string Result="";public string Error=""; public Request rq;
        public void Start(StartexportDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(StartexportDelegate del = null) { yield return rq.Send(); StartexportDone(this); del?.Invoke(Result, Error); }
    }

    public static StartexportRequest Startexport(LogsearchAccountIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        StartexportRequest rq=new StartexportRequest();
        rq.rq = Client.CreateRequest(ctx, "logsearch_startexport", input);
        return rq;
    }

    public static void StartexportDone(StartexportRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (string)rd.ToObject("");
        }
    }


	public delegate void CheckexportDelegate(LogsearchLogsStatus result, string error);
    public class CheckexportRequest {  public LogsearchLogsStatus Result=new LogsearchLogsStatus();public string Error=""; public Request rq;
        public void Start(CheckexportDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CheckexportDelegate del = null) { yield return rq.Send(); CheckexportDone(this); del?.Invoke(Result, Error); }
    }

    public static CheckexportRequest Checkexport(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CheckexportRequest rq=new CheckexportRequest();
        rq.rq = Client.CreateRequest(ctx, "logsearch_checkexport", input);
        return rq;
    }

    public static void CheckexportDone(CheckexportRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (LogsearchLogsStatus)rd.ToObject(new LogsearchLogsStatus());
        }
    }


	public delegate void DownloadexportDelegate(string result, string error);
    public class DownloadexportRequest {  public string Result="";public string Error=""; public Request rq;
        public void Start(DownloadexportDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DownloadexportDelegate del = null) { yield return rq.Send(); DownloadexportDone(this); del?.Invoke(Result, Error); }
    }

    public static DownloadexportRequest Downloadexport(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DownloadexportRequest rq=new DownloadexportRequest();
        rq.rq = Client.CreateRequest(ctx, "logsearch_downloadexport", input);
        return rq;
    }

    public static void DownloadexportDone(DownloadexportRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (string)rd.ToObject("");
        }
    }


}

} //namespace Zeuz

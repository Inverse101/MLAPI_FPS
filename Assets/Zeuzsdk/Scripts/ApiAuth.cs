// Code generated by "apigen"; DO NOT EDIT.
//Service Auth
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class AuthLoginIn
{
	public string Login=""; //arg:"" help:"Login Name"
	public bool IsUser=false; //arg:"" help:"Set to true if the provided credentials are from a user"
	public bool IsApi=false; //arg:"" help:"Set to true if the provided credentials are a combination of api key and secret"
	public Timestamp Time=new Timestamp();
	public string Nonce="";
	public string Hash="";
	public bool IgnoreLastLogin=false; //arg:"" help:"If set the last login field will not update"
	public AuthLoginIn(string _login="",bool _isuser=false,bool _isapi=false,Timestamp _time=new Timestamp(),string _nonce="",string _hash="",bool _ignorelastlogin=false) {Login=_login;IsUser=_isuser;IsApi=_isapi;Time=_time;Nonce=_nonce;Hash=_hash;IgnoreLastLogin=_ignorelastlogin;}
	public AuthLoginIn(AuthLoginIn _copy) { if (_copy == null) return;Login=_copy.Login;IsUser=_copy.IsUser;IsApi=_copy.IsApi;Time=_copy.Time;Nonce=_copy.Nonce;Hash=_copy.Hash;IgnoreLastLogin=_copy.IgnoreLastLogin;}
};

public class AuthLoginResult
{
	public string Dev="";
	public string User="";
	public string ApiKey="";
	public string Proj="";
	public string SessionID="";
	public string SessionNonce="";
	public Timestamp ValidThru=new Timestamp();
	public AuthLoginResult(string _dev="",string _user="",string _apikey="",string _proj="",string _sessionid="",string _sessionnonce="",Timestamp _validthru=new Timestamp()) {Dev=_dev;User=_user;ApiKey=_apikey;Proj=_proj;SessionID=_sessionid;SessionNonce=_sessionnonce;ValidThru=_validthru;}
	public AuthLoginResult(AuthLoginResult _copy) { if (_copy == null) return;Dev=_copy.Dev;User=_copy.User;ApiKey=_copy.ApiKey;Proj=_copy.Proj;SessionID=_copy.SessionID;SessionNonce=_copy.SessionNonce;ValidThru=_copy.ValidThru;}
};

public class AdminLoginResult
{
	public string AdminEmail="";
	public List<string> AdminPerms=new List<string>();
	public string SessionID="";
	public string SessionNonce="";
	public Timestamp ValidThru=new Timestamp();
	public AdminLoginResult(string _adminemail="",List<string> _adminperms=null,string _sessionid="",string _sessionnonce="",Timestamp _validthru=new Timestamp()) {AdminEmail=_adminemail;if(_adminperms!=null)AdminPerms=_adminperms;SessionID=_sessionid;SessionNonce=_sessionnonce;ValidThru=_validthru;}
	public AdminLoginResult(AdminLoginResult _copy) { if (_copy == null) return;AdminEmail=_copy.AdminEmail;if(_copy.AdminPerms!=null)AdminPerms=_copy.AdminPerms;SessionID=_copy.SessionID;SessionNonce=_copy.SessionNonce;ValidThru=_copy.ValidThru;}
};

public class Session : ItemCommon
{
	public string ID="";
	public string SessionKey="";
	public string Dev="";
	public string User="";
	public string ApiKey="";
	public string AdminEmail="";
	public List<string> AdminPerms=new List<string>();
	public Session(string _id="",string _sessionkey="",string _dev="",string _user="",string _apikey="",string _adminemail="",List<string> _adminperms=null,ItemCommon _base=null) : base(_base) {ID=_id;SessionKey=_sessionkey;Dev=_dev;User=_user;ApiKey=_apikey;AdminEmail=_adminemail;if(_adminperms!=null)AdminPerms=_adminperms;}
	public Session(Session _copy) { if (_copy == null) return;ID=_copy.ID;SessionKey=_copy.SessionKey;Dev=_copy.Dev;User=_copy.User;ApiKey=_copy.ApiKey;AdminEmail=_copy.AdminEmail;if(_copy.AdminPerms!=null)AdminPerms=_copy.AdminPerms;}
};


public class ApiAuth
{ 
	public delegate void LoginDelegate(AuthLoginResult result, string error);
    public class LoginRequest {  public AuthLoginResult Result=new AuthLoginResult();public string Error=""; public Request rq;
        public void Start(LoginDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(LoginDelegate del = null) { yield return rq.Send(); LoginDone(this); del?.Invoke(Result, Error); }
    }

    public static LoginRequest Login(AuthLoginIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        LoginRequest rq=new LoginRequest();
        rq.rq = Client.CreateRequest(ctx, "auth_login", input);
        return rq;
    }

    public static void LoginDone(LoginRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (AuthLoginResult)rd.ToObject(new AuthLoginResult());
        }
    }


	public delegate void CheckDelegate(Timestamp result, string error);
    public class CheckRequest {  public Timestamp Result=new Timestamp();public string Error=""; public Request rq;
        public void Start(CheckDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CheckDelegate del = null) { yield return rq.Send(); CheckDone(this); del?.Invoke(Result, Error); }
    }

    public static CheckRequest Check(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CheckRequest rq=new CheckRequest();
        rq.rq = Client.CreateRequest(ctx, "auth_check", input);
        return rq;
    }

    public static void CheckDone(CheckRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (Timestamp)rd.ToObject(new Timestamp());
        }
    }


	public delegate void LogoutDelegate(string error);
    public class LogoutRequest { public string Error=""; public Request rq;
        public void Start(LogoutDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(LogoutDelegate del = null) { yield return rq.Send(); LogoutDone(this); del?.Invoke(Error); }
    }

    public static LogoutRequest Logout( Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        LogoutRequest rq=new LogoutRequest();
        rq.rq = Client.CreateRequest(ctx, "auth_logout", null);
        return rq;
    }

    public static void LogoutDone(LogoutRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void OidcurlDelegate(string result, string error);
    public class OidcurlRequest {  public string Result="";public string Error=""; public Request rq;
        public void Start(OidcurlDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(OidcurlDelegate del = null) { yield return rq.Send(); OidcurlDone(this); del?.Invoke(Result, Error); }
    }

    public static OidcurlRequest Oidcurl(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        OidcurlRequest rq=new OidcurlRequest();
        rq.rq = Client.CreateRequest(ctx, "auth_oidcurl", input);
        return rq;
    }

    public static void OidcurlDone(OidcurlRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (string)rd.ToObject("");
        }
    }


	public delegate void OidcloginDelegate(AdminLoginResult result, string error);
    public class OidcloginRequest {  public AdminLoginResult Result=new AdminLoginResult();public string Error=""; public Request rq;
        public void Start(OidcloginDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(OidcloginDelegate del = null) { yield return rq.Send(); OidcloginDone(this); del?.Invoke(Result, Error); }
    }

    public static OidcloginRequest Oidclogin(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        OidcloginRequest rq=new OidcloginRequest();
        rq.rq = Client.CreateRequest(ctx, "auth_oidclogin", input);
        return rq;
    }

    public static void OidcloginDone(OidcloginRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (AdminLoginResult)rd.ToObject(new AdminLoginResult());
        }
    }


	public delegate void SessiondelDelegate(string error);
    public class SessiondelRequest { public string Error=""; public Request rq;
        public void Start(SessiondelDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(SessiondelDelegate del = null) { yield return rq.Send(); SessiondelDone(this); del?.Invoke(Error); }
    }

    public static SessiondelRequest Sessiondel(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        SessiondelRequest rq=new SessiondelRequest();
        rq.rq = Client.CreateRequest(ctx, "auth_sessiondel", input);
        return rq;
    }

    public static void SessiondelDone(SessiondelRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void ActivesessionsgetDelegate(List<Session> result, string error);
    public class ActivesessionsgetRequest {  public List<Session> Result=new List<Session>();public string Error=""; public Request rq;
        public void Start(ActivesessionsgetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ActivesessionsgetDelegate del = null) { yield return rq.Send(); ActivesessionsgetDone(this); del?.Invoke(Result, Error); }
    }

    public static ActivesessionsgetRequest Activesessionsget(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ActivesessionsgetRequest rq=new ActivesessionsgetRequest();
        rq.rq = Client.CreateRequest(ctx, "auth_activesessionsget", input);
        return rq;
    }

    public static void ActivesessionsgetDone(ActivesessionsgetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<Session>)rd.ToObject(new List<Session>());
        }
    }


}

} //namespace Zeuz

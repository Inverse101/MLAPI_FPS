// Code generated by "apigen"; DO NOT EDIT.
//Service Kvstore
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class KVStoreKey
{
	public string Partition=""; //arg:"required" help:"optional partition to separate data"
	public string Key=""; //arg:"required"
	public KVStoreKey(string _partition="",string _key="") {Partition=_partition;Key=_key;}
	public KVStoreKey(KVStoreKey _copy) { if (_copy == null) return;Partition=_copy.Partition;Key=_copy.Key;}
};

public class KVStoreKeyValue : KVStoreKey
{
	public string Value=""; //arg:"required"
	public KVStoreKeyValue(string _value="",KVStoreKey _base=null) : base(_base) {Value=_value;}
	public KVStoreKeyValue(KVStoreKeyValue _copy) { if (_copy == null) return;Value=_copy.Value;}
};

public class KVStorePutIn : KVStoreKeyValue
{
	public KVStorePutIn(KVStoreKeyValue _base=null) : base(_base) {}
	public KVStorePutIn(KVStorePutIn _copy) { if (_copy == null) return;}
};

public class KVStoreKVEntry
{
	public long ID=0;
	public string Partition="";
	public string Key="";
	public string Value=""; //json:",omitempty"
	public KVStoreKVEntry(long _id=0,string _partition="",string _key="",string _value="") {ID=_id;Partition=_partition;Key=_key;Value=_value;}
	public KVStoreKVEntry(KVStoreKVEntry _copy) { if (_copy == null) return;ID=_copy.ID;Partition=_copy.Partition;Key=_copy.Key;Value=_copy.Value;}
};

public class KVStoreDelIn : KVStoreKey
{
	public KVStoreDelIn(KVStoreKey _base=null) : base(_base) {}
	public KVStoreDelIn(KVStoreDelIn _copy) { if (_copy == null) return;}
};


public class ApiKVStore
{ 
	public delegate void PutDelegate(string error);
    public class PutRequest { public string Error=""; public Request rq;
        public void Start(PutDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PutDelegate del = null) { yield return rq.Send(); PutDone(this); del?.Invoke(Error); }
    }

    public static PutRequest Put(KVStorePutIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PutRequest rq=new PutRequest();
        rq.rq = Client.CreateRequest(ctx, "kvstore_put", input);
        return rq;
    }

    public static void PutDone(PutRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void GetDelegate(KVStoreKVEntry result, string error);
    public class GetRequest {  public KVStoreKVEntry Result=new KVStoreKVEntry();public string Error=""; public Request rq;
        public void Start(GetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(GetDelegate del = null) { yield return rq.Send(); GetDone(this); del?.Invoke(Result, Error); }
    }

    public static GetRequest Get(KVStoreKey input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        GetRequest rq=new GetRequest();
        rq.rq = Client.CreateRequest(ctx, "kvstore_get", input);
        return rq;
    }

    public static void GetDone(GetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (KVStoreKVEntry)rd.ToObject(new KVStoreKVEntry());
        }
    }


	public delegate void DelDelegate(string error);
    public class DelRequest { public string Error=""; public Request rq;
        public void Start(DelDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DelDelegate del = null) { yield return rq.Send(); DelDone(this); del?.Invoke(Error); }
    }

    public static DelRequest Del(KVStoreDelIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DelRequest rq=new DelRequest();
        rq.rq = Client.CreateRequest(ctx, "kvstore_del", input);
        return rq;
    }

    public static void DelDone(DelRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


}

} //namespace Zeuz

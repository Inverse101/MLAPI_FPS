// Code generated by "apigen"; DO NOT EDIT.
//Service Matchmaking
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class MatchmakingUser
{
	public string UserID=""; //arg:"required" help:"Can be a <code>zeuzsdk.UserID</code> or a <code>custom user id</code>. Please be aware, if using a custom user id, it must be unique to a specific user and should be unguessable."
	public string DisplayName=""; //json:",omitempty" arg:"optional" help:"Users display name (like <code>'BossFighter341'</code>), may also be shown to other players"
	public string Team=""; //json:",omitempty" arg:"optional" help:"Users team, i.e. <code>'police'</code> or <code>'terrorist'</code>"
	public string Slot=""; //json:",omitempty" arg:"optional" help:"Users slot, i.e. <code>'fighter'</code>, <code>'healer'</code>, <code>'magician'</code> or desired lane to fight on"
	public string Info=""; //json:",omitempty" arg:"optional" help:"Field to deliver more metadata. (i.e. <code>serialized JSON</code>)"
	public MatchmakingUser(string _userid="",string _displayname="",string _team="",string _slot="",string _info="") {UserID=_userid;DisplayName=_displayname;Team=_team;Slot=_slot;Info=_info;}
	public MatchmakingUser(MatchmakingUser _copy) { if (_copy == null) return;UserID=_copy.UserID;DisplayName=_copy.DisplayName;Team=_copy.Team;Slot=_copy.Slot;Info=_copy.Info;}
};

public class MatchMakingInit
{
	public MatchmakingUser User=new MatchmakingUser(); //help:"User identification"
	public string Compatibility=""; //help:"Hard compatibility rule (e.g. game client version)"
	public string Region=""; //help:"Regional separation (matching allocation)"
	public Dictionary<string,Variant> Params=new Dictionary<string,Variant>(); //help:"Matchmaking relevant parameters"
	public MatchMakingInit(MatchmakingUser _user=null,string _compatibility="",string _region="",Dictionary<string,Variant> _params=null) {if(_user!=null)User=_user;Compatibility=_compatibility;Region=_region;if(_params!=null)Params=_params;}
	public MatchMakingInit(MatchMakingInit _copy) { if (_copy == null) return;if(_copy.User!=null)User=_copy.User;Compatibility=_copy.Compatibility;Region=_copy.Region;if(_copy.Params!=null)Params=_copy.Params;}
};

public class MatchMakingResult
{
	public string Result="";
	public string Map="";
	public string Region="";
	public List<MatchmakingUser> Users=new List<MatchmakingUser>();
	public string ServerConnect=""; //help:"Server ip:port"
	public List<ushort> ServerPorts=new List<ushort>(); //help:"Server external ports"
	public string AllocationID=""; //help:"Allocation identifier"
	public string PayloadID=""; //help:"Server identifier"
	public string Opt=""; //help:"Free-form options in JSON format. Do not include sensitive data."
	public string Signature=""; //help:"Anti-forgery signature. Hash formula (ServerConnect + cfg.SigninKey + Opt + Timestamp)"
	public Timestamp Timestamp=new Timestamp();
	public MatchMakingResult(string _result="",string _map="",string _region="",List<MatchmakingUser> _users=null,string _serverconnect="",List<ushort> _serverports=null,string _allocationid="",string _payloadid="",string _opt="",string _signature="",Timestamp _timestamp=new Timestamp()) {Result=_result;Map=_map;Region=_region;if(_users!=null)Users=_users;ServerConnect=_serverconnect;if(_serverports!=null)ServerPorts=_serverports;AllocationID=_allocationid;PayloadID=_payloadid;Opt=_opt;Signature=_signature;Timestamp=_timestamp;}
	public MatchMakingResult(MatchMakingResult _copy) { if (_copy == null) return;Result=_copy.Result;Map=_copy.Map;Region=_copy.Region;if(_copy.Users!=null)Users=_copy.Users;ServerConnect=_copy.ServerConnect;if(_copy.ServerPorts!=null)ServerPorts=_copy.ServerPorts;AllocationID=_copy.AllocationID;PayloadID=_copy.PayloadID;Opt=_copy.Opt;Signature=_copy.Signature;Timestamp=_copy.Timestamp;}
};

public class MatchMakingStatus
{
	public string MatchMakingId="";
	public Timestamp ETA=new Timestamp(); //help:"Estimated time for finished MatchMaking (<code>state == 'matched'</code>)."
	public MatchMakingResult Result=new MatchMakingResult(); //help:"Result if finished otherwise <code>nil</code>"
	public string Error=""; //help:"Error if any otherwise empty. Possible error values: <code>'matchmaking_internal'</code>, <code>'matchmaking_invalid_session'</code>, <code>'matchmaking_no_map_found'</code> (â†’ Create a Map in the ZCP.)"
	public string State=""; //help:"Current MatchMaker phase. Possible values: <code>'matching'</code>, <code>'matched'</code>, <code>'retry'</code>, <code>'wait_for_server'</code>"
	public MatchMakingStatus(string _matchmakingid="",Timestamp _eta=new Timestamp(),MatchMakingResult _result=null,string _error="",string _state="") {MatchMakingId=_matchmakingid;ETA=_eta;if(_result!=null)Result=_result;Error=_error;State=_state;}
	public MatchMakingStatus(MatchMakingStatus _copy) { if (_copy == null) return;MatchMakingId=_copy.MatchMakingId;ETA=_copy.ETA;if(_copy.Result!=null)Result=_copy.Result;Error=_copy.Error;State=_copy.State;}
};

public class MatchMakingPartyInit : MatchMakingInit
{
	public List<MatchmakingUser> Party=new List<MatchmakingUser>(); //help:"Predefined team members"
	public string AllocationID=""; //help:"Backfill server from this Allocation"
	public string PayloadID=""; //help:"Backfill server with this ID will be used"
	public string ServerConnect=""; //help:"Backfill server with custom server (unregistred)"
	public MatchMakingPartyInit(List<MatchmakingUser> _party=null,string _allocationid="",string _payloadid="",string _serverconnect="",MatchMakingInit _base=null) : base(_base) {if(_party!=null)Party=_party;AllocationID=_allocationid;PayloadID=_payloadid;ServerConnect=_serverconnect;}
	public MatchMakingPartyInit(MatchMakingPartyInit _copy) { if (_copy == null) return;if(_copy.Party!=null)Party=_copy.Party;AllocationID=_copy.AllocationID;PayloadID=_copy.PayloadID;ServerConnect=_copy.ServerConnect;}
};

public class MatchMakingStats
{
	public int UsersCount=0;
	public MatchMakingStats(int _userscount=0) {UsersCount=_userscount;}
	public MatchMakingStats(MatchMakingStats _copy) { if (_copy == null) return;UsersCount=_copy.UsersCount;}
};

public class MatchMakingServerInfo
{
	public string PayloadID="";
	public bool Allocatable=false;
	public int UserCount=0;
	public string IP="";
	public List<ushort> Ports=new List<ushort>();
	public string MachineID="";
	public string AllocationID="";
	public List<string> Regions=new List<string>();
	public Timestamp Created=new Timestamp(); //help:"entry first created"
	public Timestamp Updated=new Timestamp(); //help:"entry last updated"
	public Timestamp Refreshed=new Timestamp(); //help:"last serverbrowser_refresh call"
	public Timestamp Allocated=new Timestamp(); //help:"assigned to a match"
	public MatchMakingServerInfo(string _payloadid="",bool _allocatable=false,int _usercount=0,string _ip="",List<ushort> _ports=null,string _machineid="",string _allocationid="",List<string> _regions=null,Timestamp _created=new Timestamp(),Timestamp _updated=new Timestamp(),Timestamp _refreshed=new Timestamp(),Timestamp _allocated=new Timestamp()) {PayloadID=_payloadid;Allocatable=_allocatable;UserCount=_usercount;IP=_ip;if(_ports!=null)Ports=_ports;MachineID=_machineid;AllocationID=_allocationid;if(_regions!=null)Regions=_regions;Created=_created;Updated=_updated;Refreshed=_refreshed;Allocated=_allocated;}
	public MatchMakingServerInfo(MatchMakingServerInfo _copy) { if (_copy == null) return;PayloadID=_copy.PayloadID;Allocatable=_copy.Allocatable;UserCount=_copy.UserCount;IP=_copy.IP;if(_copy.Ports!=null)Ports=_copy.Ports;MachineID=_copy.MachineID;AllocationID=_copy.AllocationID;if(_copy.Regions!=null)Regions=_copy.Regions;Created=_copy.Created;Updated=_copy.Updated;Refreshed=_copy.Refreshed;Allocated=_copy.Allocated;}
};


public class ApiMatchmaking
{ 
	public delegate void CreateDelegate(MatchMakingStatus result, string error);
    public class CreateRequest {  public MatchMakingStatus Result=new MatchMakingStatus();public string Error=""; public Request rq;
        public void Start(CreateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CreateDelegate del = null) { yield return rq.Send(); CreateDone(this); del?.Invoke(Result, Error); }
    }

    public static CreateRequest Create(MatchMakingInit input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CreateRequest rq=new CreateRequest();
        rq.rq = Client.CreateRequest(ctx, "matchmaking_create", input);
        return rq;
    }

    public static void CreateDone(CreateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (MatchMakingStatus)rd.ToObject(new MatchMakingStatus());
        }
    }


	public delegate void CreatepartyDelegate(MatchMakingStatus result, string error);
    public class CreatepartyRequest {  public MatchMakingStatus Result=new MatchMakingStatus();public string Error=""; public Request rq;
        public void Start(CreatepartyDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CreatepartyDelegate del = null) { yield return rq.Send(); CreatepartyDone(this); del?.Invoke(Result, Error); }
    }

    public static CreatepartyRequest Createparty(MatchMakingPartyInit input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CreatepartyRequest rq=new CreatepartyRequest();
        rq.rq = Client.CreateRequest(ctx, "matchmaking_createparty", input);
        return rq;
    }

    public static void CreatepartyDone(CreatepartyRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (MatchMakingStatus)rd.ToObject(new MatchMakingStatus());
        }
    }


	public delegate void UpdateDelegate(MatchMakingStatus result, string error);
    public class UpdateRequest {  public MatchMakingStatus Result=new MatchMakingStatus();public string Error=""; public Request rq;
        public void Start(UpdateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(UpdateDelegate del = null) { yield return rq.Send(); UpdateDone(this); del?.Invoke(Result, Error); }
    }

    public static UpdateRequest Update(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        UpdateRequest rq=new UpdateRequest();
        rq.rq = Client.CreateRequest(ctx, "matchmaking_update", input);
        return rq;
    }

    public static void UpdateDone(UpdateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (MatchMakingStatus)rd.ToObject(new MatchMakingStatus());
        }
    }


	public delegate void CloseDelegate(string error);
    public class CloseRequest { public string Error=""; public Request rq;
        public void Start(CloseDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CloseDelegate del = null) { yield return rq.Send(); CloseDone(this); del?.Invoke(Error); }
    }

    public static CloseRequest Close(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CloseRequest rq=new CloseRequest();
        rq.rq = Client.CreateRequest(ctx, "matchmaking_close", input);
        return rq;
    }

    public static void CloseDone(CloseRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void StatsDelegate(MatchMakingStats result, string error);
    public class StatsRequest {  public MatchMakingStats Result=new MatchMakingStats();public string Error=""; public Request rq;
        public void Start(StatsDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(StatsDelegate del = null) { yield return rq.Send(); StatsDone(this); del?.Invoke(Result, Error); }
    }

    public static StatsRequest Stats( Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        StatsRequest rq=new StatsRequest();
        rq.rq = Client.CreateRequest(ctx, "matchmaking_stats", null);
        return rq;
    }

    public static void StatsDone(StatsRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (MatchMakingStats)rd.ToObject(new MatchMakingStats());
        }
    }


	public delegate void ServerrefreshDelegate(string error);
    public class ServerrefreshRequest { public string Error=""; public Request rq;
        public void Start(ServerrefreshDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ServerrefreshDelegate del = null) { yield return rq.Send(); ServerrefreshDone(this); del?.Invoke(Error); }
    }

    public static ServerrefreshRequest Serverrefresh(MatchMakingServerInfo input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ServerrefreshRequest rq=new ServerrefreshRequest();
        rq.rq = Client.CreateRequest(ctx, "matchmaking_serverrefresh", input);
        return rq;
    }

    public static void ServerrefreshDone(ServerrefreshRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void ServerdestroyDelegate(string error);
    public class ServerdestroyRequest { public string Error=""; public Request rq;
        public void Start(ServerdestroyDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ServerdestroyDelegate del = null) { yield return rq.Send(); ServerdestroyDone(this); del?.Invoke(Error); }
    }

    public static ServerdestroyRequest Serverdestroy(MatchMakingServerInfo input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ServerdestroyRequest rq=new ServerdestroyRequest();
        rq.rq = Client.CreateRequest(ctx, "matchmaking_serverdestroy", input);
        return rq;
    }

    public static void ServerdestroyDone(ServerdestroyRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


}

} //namespace Zeuz

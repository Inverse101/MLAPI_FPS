// Code generated by "apigen"; DO NOT EDIT.
//Service Admin
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class AdminStatsIn
{
	public string Table=""; //arg:"required" help:"one of: account, team, developer, proj, env"
	public string Start=""; //arg:"required" help:"start date YYYY-MM-DD"
	public string End=""; //arg:"required" help:"end date YYYY-MM-DD"
	public string GroupBy=""; //arg:"required" help:"one of: hour, day, week, month, year"
	public string Count=""; //arg:"required" help:"one of: total, created, updated"
	public AdminStatsIn(string _table="",string _start="",string _end="",string _groupby="",string _count="") {Table=_table;Start=_start;End=_end;GroupBy=_groupby;Count=_count;}
	public AdminStatsIn(AdminStatsIn _copy) { if (_copy == null) return;Table=_copy.Table;Start=_copy.Start;End=_copy.End;GroupBy=_copy.GroupBy;Count=_copy.Count;}
};

public class AdminStat
{
	public string GroupCol="";
	public int CountVal=0;
	public AdminStat(string _groupcol="",int _countval=0) {GroupCol=_groupcol;CountVal=_countval;}
	public AdminStat(AdminStat _copy) { if (_copy == null) return;GroupCol=_copy.GroupCol;CountVal=_copy.CountVal;}
};

public class AdminStatsOut
{
	public List<AdminStat> Stats=new List<AdminStat>();
	public AdminStatsOut(List<AdminStat> _stats=null) {if(_stats!=null)Stats=_stats;}
	public AdminStatsOut(AdminStatsOut _copy) { if (_copy == null) return;if(_copy.Stats!=null)Stats=_copy.Stats;}
};

public class AdminLogsIn
{
	public string Start=""; //arg:"required" help:"start date YYYY-MM-DD"
	public string End=""; //arg:"required" help:"end date YYYY-MM-DD"
	public string Account=""; //arg:"optional" help:"account ID"
	public string Project=""; //arg:"optional" help:"project ID"
	public AdminLogsIn(string _start="",string _end="",string _account="",string _project="") {Start=_start;End=_end;Account=_account;Project=_project;}
	public AdminLogsIn(AdminLogsIn _copy) { if (_copy == null) return;Start=_copy.Start;End=_copy.End;Account=_copy.Account;Project=_copy.Project;}
};

public class LogsearchOut
{
	public Variant Stats=new Variant();
	public LogsearchOut(Variant _stats=null) {if(_stats!=null)Stats=_stats;}
	public LogsearchOut(LogsearchOut _copy) { if (_copy == null) return;if(_copy.Stats!=null)Stats=_copy.Stats;}
};

public class AdminItemsIn
{
	public string Table="";
	public string Query="";
	public AdminItemsIn(string _table="",string _query="") {Table=_table;Query=_query;}
	public AdminItemsIn(AdminItemsIn _copy) { if (_copy == null) return;Table=_copy.Table;Query=_copy.Query;}
};

public class AdminItem
{
	public string ID=""; //json:"Id"
	public string Name="";
	public AdminItem(string _id="",string _name="") {ID=_id;Name=_name;}
	public AdminItem(AdminItem _copy) { if (_copy == null) return;ID=_copy.ID;Name=_copy.Name;}
};

public class AdminItemsOut
{
	public List<AdminItem> Items=new List<AdminItem>();
	public AdminItemsOut(List<AdminItem> _items=null) {if(_items!=null)Items=_items;}
	public AdminItemsOut(AdminItemsOut _copy) { if (_copy == null) return;if(_copy.Items!=null)Items=_copy.Items;}
};

public class AdminAccountsIn
{
	public AdminAccountsIn() {}
	public AdminAccountsIn(AdminAccountsIn _copy) { if (_copy == null) return;}
};

public class ACLEntry
{
	public string ID="";
	public sbyte Grant=0;
	public sbyte Deny=0;
	public ACLEntry(string _id="",sbyte _grant=0,sbyte _deny=0) {ID=_id;Grant=_grant;Deny=_deny;}
	public ACLEntry(ACLEntry _copy) { if (_copy == null) return;ID=_copy.ID;Grant=_copy.Grant;Deny=_copy.Deny;}
};

public class ACL
{
	public List<ACLEntry> List=new List<ACLEntry>();
	public ACL(List<ACLEntry> _list=null) {if(_list!=null)List=_list;}
	public ACL(ACL _copy) { if (_copy == null) return;if(_copy.List!=null)List=_copy.List;}
};

public class Properties
{
	public int Version=0;
	public string Tags="";
	public Variant Val=new Variant();
	public Properties(int _version=0,string _tags="",Variant _val=null) {Version=_version;Tags=_tags;if(_val!=null)Val=_val;}
	public Properties(Properties _copy) { if (_copy == null) return;Version=_copy.Version;Tags=_copy.Tags;if(_copy.Val!=null)Val=_copy.Val;}
};

public class ItemCommon
{
	public int Version=0; //arg:"-"
	public string Title="";
	public ACL ACL=new ACL(); //arg:"-"
	public Properties Props=new Properties(); //arg:"-"
	public Timestamp Created=new Timestamp(); //arg:"-"
	public string CreatedBy="";
	public Timestamp Modified=new Timestamp(); //arg:"-"
	public string ModifiedBy="";
	public Timestamp Expires=new Timestamp(); //arg:"-"
	public ItemCommon(int _version=0,string _title="",ACL _acl=null,Properties _props=null,Timestamp _created=new Timestamp(),string _createdby="",Timestamp _modified=new Timestamp(),string _modifiedby="",Timestamp _expires=new Timestamp()) {Version=_version;Title=_title;if(_acl!=null)ACL=_acl;if(_props!=null)Props=_props;Created=_created;CreatedBy=_createdby;Modified=_modified;ModifiedBy=_modifiedby;Expires=_expires;}
	public ItemCommon(ItemCommon _copy) { if (_copy == null) return;Version=_copy.Version;Title=_copy.Title;if(_copy.ACL!=null)ACL=_copy.ACL;if(_copy.Props!=null)Props=_copy.Props;Created=_copy.Created;CreatedBy=_copy.CreatedBy;Modified=_copy.Modified;ModifiedBy=_copy.ModifiedBy;Expires=_copy.Expires;}
};

public class ProvisioningAccount
{
	public string ProviderID="";
	public string ProviderName="";
	public bool SpawnInstances=false;
	public string Username="";
	public string Password="";
	public string APIKey="";
	public string SecretID="";
	public string SecretKey="";
	public string SubscriptionID="";
	public string TenantID="";
	public string ClientID="";
	public string ClientSecret="";
	public string ProjectID="";
	public string GcpCredentialsFile="";
	public string GcpFileName="";
	public Timestamp GcpUploadFileDate=new Timestamp();
	public ProvisioningAccount(string _providerid="",string _providername="",bool _spawninstances=false,string _username="",string _password="",string _apikey="",string _secretid="",string _secretkey="",string _subscriptionid="",string _tenantid="",string _clientid="",string _clientsecret="",string _projectid="",string _gcpcredentialsfile="",string _gcpfilename="",Timestamp _gcpuploadfiledate=new Timestamp()) {ProviderID=_providerid;ProviderName=_providername;SpawnInstances=_spawninstances;Username=_username;Password=_password;APIKey=_apikey;SecretID=_secretid;SecretKey=_secretkey;SubscriptionID=_subscriptionid;TenantID=_tenantid;ClientID=_clientid;ClientSecret=_clientsecret;ProjectID=_projectid;GcpCredentialsFile=_gcpcredentialsfile;GcpFileName=_gcpfilename;GcpUploadFileDate=_gcpuploadfiledate;}
	public ProvisioningAccount(ProvisioningAccount _copy) { if (_copy == null) return;ProviderID=_copy.ProviderID;ProviderName=_copy.ProviderName;SpawnInstances=_copy.SpawnInstances;Username=_copy.Username;Password=_copy.Password;APIKey=_copy.APIKey;SecretID=_copy.SecretID;SecretKey=_copy.SecretKey;SubscriptionID=_copy.SubscriptionID;TenantID=_copy.TenantID;ClientID=_copy.ClientID;ClientSecret=_copy.ClientSecret;ProjectID=_copy.ProjectID;GcpCredentialsFile=_copy.GcpCredentialsFile;GcpFileName=_copy.GcpFileName;GcpUploadFileDate=_copy.GcpUploadFileDate;}
};

public class Account : ItemCommon
{
	public string ID="";
	public List<string> Managers=new List<string>();
	public List<string> Projects=new List<string>();
	public List<string> Teams=new List<string>();
	public List<string> Devs=new List<string>();
	public string Desc="";
	public string EMail="";
	public string Company="";
	public string Department="";
	public string Country="";
	public string ZIP="";
	public string City="";
	public string StreetAddr="";
	public List<ProvisioningAccount> ProvisioningAccounts=new List<ProvisioningAccount>(); //arg:"-"
	public Account(string _id="",List<string> _managers=null,List<string> _projects=null,List<string> _teams=null,List<string> _devs=null,string _desc="",string _email="",string _company="",string _department="",string _country="",string _zip="",string _city="",string _streetaddr="",List<ProvisioningAccount> _provisioningaccounts=null,ItemCommon _base=null) : base(_base) {ID=_id;if(_managers!=null)Managers=_managers;if(_projects!=null)Projects=_projects;if(_teams!=null)Teams=_teams;if(_devs!=null)Devs=_devs;Desc=_desc;EMail=_email;Company=_company;Department=_department;Country=_country;ZIP=_zip;City=_city;StreetAddr=_streetaddr;if(_provisioningaccounts!=null)ProvisioningAccounts=_provisioningaccounts;}
	public Account(Account _copy) { if (_copy == null) return;ID=_copy.ID;if(_copy.Managers!=null)Managers=_copy.Managers;if(_copy.Projects!=null)Projects=_copy.Projects;if(_copy.Teams!=null)Teams=_copy.Teams;if(_copy.Devs!=null)Devs=_copy.Devs;Desc=_copy.Desc;EMail=_copy.EMail;Company=_copy.Company;Department=_copy.Department;Country=_copy.Country;ZIP=_copy.ZIP;City=_copy.City;StreetAddr=_copy.StreetAddr;if(_copy.ProvisioningAccounts!=null)ProvisioningAccounts=_copy.ProvisioningAccounts;}
};

public class AdminAccountIn
{
	public string AccountID=""; //json:"AccountId"
	public AdminAccountIn(string _accountid="") {AccountID=_accountid;}
	public AdminAccountIn(AdminAccountIn _copy) { if (_copy == null) return;AccountID=_copy.AccountID;}
};

public class ProjEnvInfo
{
	public string ID="";
	public string Title="";
	public ProjEnvInfo(string _id="",string _title="") {ID=_id;Title=_title;}
	public ProjEnvInfo(ProjEnvInfo _copy) { if (_copy == null) return;ID=_copy.ID;Title=_copy.Title;}
};

public class Proj : ItemCommon
{
	public string ID="";
	public string Account="";
	public string Desc="";
	public List<ProjEnvInfo> Envs=new List<ProjEnvInfo>();
	public Proj(string _id="",string _account="",string _desc="",List<ProjEnvInfo> _envs=null,ItemCommon _base=null) : base(_base) {ID=_id;Account=_account;Desc=_desc;if(_envs!=null)Envs=_envs;}
	public Proj(Proj _copy) { if (_copy == null) return;ID=_copy.ID;Account=_copy.Account;Desc=_copy.Desc;if(_copy.Envs!=null)Envs=_copy.Envs;}
};

public class Developer : ItemCommon
{
	public string ID="";
	public string Account="";
	public sbyte Role=0;
	public string Login="";
	public string Desc="";
	public string PWHash=""; //json:",omitempty"
	public Timestamp LastLogin=new Timestamp();
	public List<string> Projects=new List<string>();
	public List<string> Teams=new List<string>();
	public bool Revoked=false;
	public Timestamp RevokedAt=new Timestamp();
	public Timestamp PasswordRequestExpiry=new Timestamp();
	public Developer(string _id="",string _account="",sbyte _role=0,string _login="",string _desc="",string _pwhash="",Timestamp _lastlogin=new Timestamp(),List<string> _projects=null,List<string> _teams=null,bool _revoked=false,Timestamp _revokedat=new Timestamp(),Timestamp _passwordrequestexpiry=new Timestamp(),ItemCommon _base=null) : base(_base) {ID=_id;Account=_account;Role=_role;Login=_login;Desc=_desc;PWHash=_pwhash;LastLogin=_lastlogin;if(_projects!=null)Projects=_projects;if(_teams!=null)Teams=_teams;Revoked=_revoked;RevokedAt=_revokedat;PasswordRequestExpiry=_passwordrequestexpiry;}
	public Developer(Developer _copy) { if (_copy == null) return;ID=_copy.ID;Account=_copy.Account;Role=_copy.Role;Login=_copy.Login;Desc=_copy.Desc;PWHash=_copy.PWHash;LastLogin=_copy.LastLogin;if(_copy.Projects!=null)Projects=_copy.Projects;if(_copy.Teams!=null)Teams=_copy.Teams;Revoked=_copy.Revoked;RevokedAt=_copy.RevokedAt;PasswordRequestExpiry=_copy.PasswordRequestExpiry;}
};

public class AdminEnvIn
{
	public string ProjectID=""; //json:"ProjectId"
	public AdminEnvIn(string _projectid="") {ProjectID=_projectid;}
	public AdminEnvIn(AdminEnvIn _copy) { if (_copy == null) return;ProjectID=_copy.ProjectID;}
};

public class ServiceCfg
{
	public string ServiceType="";
	public int MaxScale=0;
	public int CurScale=0;
	public int CloudScale=0;
	public int Busy=0;
	public int Idle=0;
	public string Params="";
	public ServiceCfg(string _servicetype="",int _maxscale=0,int _curscale=0,int _cloudscale=0,int _busy=0,int _idle=0,string _params="") {ServiceType=_servicetype;MaxScale=_maxscale;CurScale=_curscale;CloudScale=_cloudscale;Busy=_busy;Idle=_idle;Params=_params;}
	public ServiceCfg(ServiceCfg _copy) { if (_copy == null) return;ServiceType=_copy.ServiceType;MaxScale=_copy.MaxScale;CurScale=_copy.CurScale;CloudScale=_copy.CloudScale;Busy=_copy.Busy;Idle=_copy.Idle;Params=_copy.Params;}
};

public class Env : ItemCommon
{
	public string ID="";
	public string Proj="";
	public string Account="";
	public bool Enabled=false;
	public string Desc="";
	public int MaxScale=0;
	public int CurScale=0;
	public List<ServiceCfg> Services=new List<ServiceCfg>();
	public Env(string _id="",string _proj="",string _account="",bool _enabled=false,string _desc="",int _maxscale=0,int _curscale=0,List<ServiceCfg> _services=null,ItemCommon _base=null) : base(_base) {ID=_id;Proj=_proj;Account=_account;Enabled=_enabled;Desc=_desc;MaxScale=_maxscale;CurScale=_curscale;if(_services!=null)Services=_services;}
	public Env(Env _copy) { if (_copy == null) return;ID=_copy.ID;Proj=_copy.Proj;Account=_copy.Account;Enabled=_copy.Enabled;Desc=_copy.Desc;MaxScale=_copy.MaxScale;CurScale=_copy.CurScale;if(_copy.Services!=null)Services=_copy.Services;}
};

public class AdminCountResourcesIn
{
	public bool OnlyInUse=false;
	public string RegionID="";
	public AdminCountResourcesIn(bool _onlyinuse=false,string _regionid="") {OnlyInUse=_onlyinuse;RegionID=_regionid;}
	public AdminCountResourcesIn(AdminCountResourcesIn _copy) { if (_copy == null) return;OnlyInUse=_copy.OnlyInUse;RegionID=_copy.RegionID;}
};

public class AdminTestPoolIn
{
	public string RegionID="";
	public AdminTestPoolIn(string _regionid="") {RegionID=_regionid;}
	public AdminTestPoolIn(AdminTestPoolIn _copy) { if (_copy == null) return;RegionID=_copy.RegionID;}
};

public class AdminCountResoucesPerAccountOut
{
	public string AccountID="";
	public string AccountName="";
	public int Count=0;
	public AdminCountResoucesPerAccountOut(string _accountid="",string _accountname="",int _count=0) {AccountID=_accountid;AccountName=_accountname;Count=_count;}
	public AdminCountResoucesPerAccountOut(AdminCountResoucesPerAccountOut _copy) { if (_copy == null) return;AccountID=_copy.AccountID;AccountName=_copy.AccountName;Count=_copy.Count;}
};


public class ApiAdmin
{ 
	public delegate void StatsDelegate(AdminStatsOut result, string error);
    public class StatsRequest {  public AdminStatsOut Result=new AdminStatsOut();public string Error=""; public Request rq;
        public void Start(StatsDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(StatsDelegate del = null) { yield return rq.Send(); StatsDone(this); del?.Invoke(Result, Error); }
    }

    public static StatsRequest Stats(AdminStatsIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        StatsRequest rq=new StatsRequest();
        rq.rq = Client.CreateRequest(ctx, "admin_stats", input);
        return rq;
    }

    public static void StatsDone(StatsRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (AdminStatsOut)rd.ToObject(new AdminStatsOut());
        }
    }


	public delegate void LogsDelegate(LogsearchOut result, string error);
    public class LogsRequest {  public LogsearchOut Result=new LogsearchOut();public string Error=""; public Request rq;
        public void Start(LogsDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(LogsDelegate del = null) { yield return rq.Send(); LogsDone(this); del?.Invoke(Result, Error); }
    }

    public static LogsRequest Logs(AdminLogsIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        LogsRequest rq=new LogsRequest();
        rq.rq = Client.CreateRequest(ctx, "admin_logs", input);
        return rq;
    }

    public static void LogsDone(LogsRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (LogsearchOut)rd.ToObject(new LogsearchOut());
        }
    }


	public delegate void ItemsDelegate(AdminItemsOut result, string error);
    public class ItemsRequest {  public AdminItemsOut Result=new AdminItemsOut();public string Error=""; public Request rq;
        public void Start(ItemsDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ItemsDelegate del = null) { yield return rq.Send(); ItemsDone(this); del?.Invoke(Result, Error); }
    }

    public static ItemsRequest Items(AdminItemsIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ItemsRequest rq=new ItemsRequest();
        rq.rq = Client.CreateRequest(ctx, "admin_items", input);
        return rq;
    }

    public static void ItemsDone(ItemsRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (AdminItemsOut)rd.ToObject(new AdminItemsOut());
        }
    }


	public delegate void AccountsDelegate(List<Account> result, string error);
    public class AccountsRequest {  public List<Account> Result=new List<Account>();public string Error=""; public Request rq;
        public void Start(AccountsDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(AccountsDelegate del = null) { yield return rq.Send(); AccountsDone(this); del?.Invoke(Result, Error); }
    }

    public static AccountsRequest Accounts(AdminAccountsIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        AccountsRequest rq=new AccountsRequest();
        rq.rq = Client.CreateRequest(ctx, "admin_accounts", input);
        return rq;
    }

    public static void AccountsDone(AccountsRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<Account>)rd.ToObject(new List<Account>());
        }
    }


	public delegate void ProjectsDelegate(List<Proj> result, string error);
    public class ProjectsRequest {  public List<Proj> Result=new List<Proj>();public string Error=""; public Request rq;
        public void Start(ProjectsDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ProjectsDelegate del = null) { yield return rq.Send(); ProjectsDone(this); del?.Invoke(Result, Error); }
    }

    public static ProjectsRequest Projects(AdminAccountIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ProjectsRequest rq=new ProjectsRequest();
        rq.rq = Client.CreateRequest(ctx, "admin_projects", input);
        return rq;
    }

    public static void ProjectsDone(ProjectsRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<Proj>)rd.ToObject(new List<Proj>());
        }
    }


	public delegate void DevelopersDelegate(List<Developer> result, string error);
    public class DevelopersRequest {  public List<Developer> Result=new List<Developer>();public string Error=""; public Request rq;
        public void Start(DevelopersDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(DevelopersDelegate del = null) { yield return rq.Send(); DevelopersDone(this); del?.Invoke(Result, Error); }
    }

    public static DevelopersRequest Developers(AdminAccountIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        DevelopersRequest rq=new DevelopersRequest();
        rq.rq = Client.CreateRequest(ctx, "admin_developers", input);
        return rq;
    }

    public static void DevelopersDone(DevelopersRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<Developer>)rd.ToObject(new List<Developer>());
        }
    }


	public delegate void EnvironmentsDelegate(List<Env> result, string error);
    public class EnvironmentsRequest {  public List<Env> Result=new List<Env>();public string Error=""; public Request rq;
        public void Start(EnvironmentsDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(EnvironmentsDelegate del = null) { yield return rq.Send(); EnvironmentsDone(this); del?.Invoke(Result, Error); }
    }

    public static EnvironmentsRequest Environments(AdminEnvIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        EnvironmentsRequest rq=new EnvironmentsRequest();
        rq.rq = Client.CreateRequest(ctx, "admin_environments", input);
        return rq;
    }

    public static void EnvironmentsDone(EnvironmentsRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<Env>)rd.ToObject(new List<Env>());
        }
    }


	public delegate void CountresourcesDelegate(int result, string error);
    public class CountresourcesRequest {  public int Result=0;public string Error=""; public Request rq;
        public void Start(CountresourcesDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CountresourcesDelegate del = null) { yield return rq.Send(); CountresourcesDone(this); del?.Invoke(Result, Error); }
    }

    public static CountresourcesRequest Countresources(AdminCountResourcesIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CountresourcesRequest rq=new CountresourcesRequest();
        rq.rq = Client.CreateRequest(ctx, "admin_countresources", input);
        return rq;
    }

    public static void CountresourcesDone(CountresourcesRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (int)rd.ToObject(0);
        }
    }


	public delegate void GetquotaDelegate(int result, string error);
    public class GetquotaRequest {  public int Result=0;public string Error=""; public Request rq;
        public void Start(GetquotaDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(GetquotaDelegate del = null) { yield return rq.Send(); GetquotaDone(this); del?.Invoke(Result, Error); }
    }

    public static GetquotaRequest Getquota(AdminTestPoolIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        GetquotaRequest rq=new GetquotaRequest();
        rq.rq = Client.CreateRequest(ctx, "admin_getquota", input);
        return rq;
    }

    public static void GetquotaDone(GetquotaRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (int)rd.ToObject(0);
        }
    }


	public delegate void CountresourcesperaccDelegate(List<AdminCountResoucesPerAccountOut> result, string error);
    public class CountresourcesperaccRequest {  public List<AdminCountResoucesPerAccountOut> Result=new List<AdminCountResoucesPerAccountOut>();public string Error=""; public Request rq;
        public void Start(CountresourcesperaccDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CountresourcesperaccDelegate del = null) { yield return rq.Send(); CountresourcesperaccDone(this); del?.Invoke(Result, Error); }
    }

    public static CountresourcesperaccRequest Countresourcesperacc(AdminTestPoolIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CountresourcesperaccRequest rq=new CountresourcesperaccRequest();
        rq.rq = Client.CreateRequest(ctx, "admin_countresourcesperacc", input);
        return rq;
    }

    public static void CountresourcesperaccDone(CountresourcesperaccRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<AdminCountResoucesPerAccountOut>)rd.ToObject(new List<AdminCountResoucesPerAccountOut>());
        }
    }


}

} //namespace Zeuz

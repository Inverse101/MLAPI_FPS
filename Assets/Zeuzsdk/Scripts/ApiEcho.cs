// Code generated by "apigen"; DO NOT EDIT.
//Service Echo
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class EchoIn
{
	public string Text=""; //arg:"required" help:"input text"
	public EchoIn(string _text="") {Text=_text;}
	public EchoIn(EchoIn _copy) { if (_copy == null) return;Text=_copy.Text;}
};

public class EchoOut
{
	public string Text=""; //help:"returned text"
	public EchoOut(string _text="") {Text=_text;}
	public EchoOut(EchoOut _copy) { if (_copy == null) return;Text=_copy.Text;}
};

public class Echo2In
{
	public string Text="";
	public Echo2In(string _text="") {Text=_text;}
	public Echo2In(Echo2In _copy) { if (_copy == null) return;Text=_copy.Text;}
};

public class Echo2Out
{
	public string Text="";
	public Echo2Out(string _text="") {Text=_text;}
	public Echo2Out(Echo2Out _copy) { if (_copy == null) return;Text=_copy.Text;}
};

public class Echo3In
{
	public int Num=0;
	public Echo3In(int _num=0) {Num=_num;}
	public Echo3In(Echo3In _copy) { if (_copy == null) return;Num=_copy.Num;}
};


public class ApiEcho
{ 
	public delegate void Echo1Delegate(EchoOut result, string error);
    public class Echo1Request {  public EchoOut Result=new EchoOut();public string Error=""; public Request rq;
        public void Start(Echo1Delegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(Echo1Delegate del = null) { yield return rq.Send(); Echo1Done(this); del?.Invoke(Result, Error); }
    }

    public static Echo1Request Echo1(EchoIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        Echo1Request rq=new Echo1Request();
        rq.rq = Client.CreateRequest(ctx, "echo_1", input);
        return rq;
    }

    public static void Echo1Done(Echo1Request rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (EchoOut)rd.ToObject(new EchoOut());
        }
    }


	public delegate void Echo2Delegate(Echo2Out result, string error);
    public class Echo2Request {  public Echo2Out Result=new Echo2Out();public string Error=""; public Request rq;
        public void Start(Echo2Delegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(Echo2Delegate del = null) { yield return rq.Send(); Echo2Done(this); del?.Invoke(Result, Error); }
    }

    public static Echo2Request Echo2(Echo2In input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        Echo2Request rq=new Echo2Request();
        rq.rq = Client.CreateRequest(ctx, "echo_2", input);
        return rq;
    }

    public static void Echo2Done(Echo2Request rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (Echo2Out)rd.ToObject(new Echo2Out());
        }
    }


	public delegate void Echo3Delegate(EchoOut result, string error);
    public class Echo3Request {  public EchoOut Result=new EchoOut();public string Error=""; public Request rq;
        public void Start(Echo3Delegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(Echo3Delegate del = null) { yield return rq.Send(); Echo3Done(this); del?.Invoke(Result, Error); }
    }

    public static Echo3Request Echo3(Echo3In input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        Echo3Request rq=new Echo3Request();
        rq.rq = Client.CreateRequest(ctx, "echo_3", input);
        return rq;
    }

    public static void Echo3Done(Echo3Request rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (EchoOut)rd.ToObject(new EchoOut());
        }
    }


	public delegate void Echo4Delegate(string result, string error);
    public class Echo4Request {  public string Result="";public string Error=""; public Request rq;
        public void Start(Echo4Delegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(Echo4Delegate del = null) { yield return rq.Send(); Echo4Done(this); del?.Invoke(Result, Error); }
    }

    public static Echo4Request Echo4(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        Echo4Request rq=new Echo4Request();
        rq.rq = Client.CreateRequest(ctx, "echo_4", input);
        return rq;
    }

    public static void Echo4Done(Echo4Request rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (string)rd.ToObject("");
        }
    }


}

} //namespace Zeuz

// Code generated by "apigen"; DO NOT EDIT.
//Service Metrics
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class MetricsQueryIn
{
	public Timestamp Start=new Timestamp();
	public Timestamp End=new Timestamp();
	public long Step=0;
	public string GroupBy="";
	public List<string> PayloadIDs=new List<string>();
	public List<string> MachineIDs=new List<string>();
	public List<string> AllocationIDs=new List<string>();
	public MetricsQueryIn(Timestamp _start=new Timestamp(),Timestamp _end=new Timestamp(),long _step=0,string _groupby="",List<string> _payloadids=null,List<string> _machineids=null,List<string> _allocationids=null) {Start=_start;End=_end;Step=_step;GroupBy=_groupby;if(_payloadids!=null)PayloadIDs=_payloadids;if(_machineids!=null)MachineIDs=_machineids;if(_allocationids!=null)AllocationIDs=_allocationids;}
	public MetricsQueryIn(MetricsQueryIn _copy) { if (_copy == null) return;Start=_copy.Start;End=_copy.End;Step=_copy.Step;GroupBy=_copy.GroupBy;if(_copy.PayloadIDs!=null)PayloadIDs=_copy.PayloadIDs;if(_copy.MachineIDs!=null)MachineIDs=_copy.MachineIDs;if(_copy.AllocationIDs!=null)AllocationIDs=_copy.AllocationIDs;}
};


public class ApiMetrics
{ 
	public delegate void MachinecpuusageDelegate(object result, string error);
    public class MachinecpuusageRequest {  public object Result=new object();public string Error=""; public Request rq;
        public void Start(MachinecpuusageDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(MachinecpuusageDelegate del = null) { yield return rq.Send(); MachinecpuusageDone(this); del?.Invoke(Result, Error); }
    }

    public static MachinecpuusageRequest Machinecpuusage(MetricsQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        MachinecpuusageRequest rq=new MachinecpuusageRequest();
        rq.rq = Client.CreateRequest(ctx, "metrics_machinecpuusage", input);
        return rq;
    }

    public static void MachinecpuusageDone(MachinecpuusageRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (object)rd.ToObject(new object());
        }
    }


	public delegate void MachinememoryusageDelegate(object result, string error);
    public class MachinememoryusageRequest {  public object Result=new object();public string Error=""; public Request rq;
        public void Start(MachinememoryusageDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(MachinememoryusageDelegate del = null) { yield return rq.Send(); MachinememoryusageDone(this); del?.Invoke(Result, Error); }
    }

    public static MachinememoryusageRequest Machinememoryusage(MetricsQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        MachinememoryusageRequest rq=new MachinememoryusageRequest();
        rq.rq = Client.CreateRequest(ctx, "metrics_machinememoryusage", input);
        return rq;
    }

    public static void MachinememoryusageDone(MachinememoryusageRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (object)rd.ToObject(new object());
        }
    }


	public delegate void MachinenetworksentDelegate(object result, string error);
    public class MachinenetworksentRequest {  public object Result=new object();public string Error=""; public Request rq;
        public void Start(MachinenetworksentDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(MachinenetworksentDelegate del = null) { yield return rq.Send(); MachinenetworksentDone(this); del?.Invoke(Result, Error); }
    }

    public static MachinenetworksentRequest Machinenetworksent(MetricsQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        MachinenetworksentRequest rq=new MachinenetworksentRequest();
        rq.rq = Client.CreateRequest(ctx, "metrics_machinenetworksent", input);
        return rq;
    }

    public static void MachinenetworksentDone(MachinenetworksentRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (object)rd.ToObject(new object());
        }
    }


	public delegate void MachinenetworkreceivedDelegate(object result, string error);
    public class MachinenetworkreceivedRequest {  public object Result=new object();public string Error=""; public Request rq;
        public void Start(MachinenetworkreceivedDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(MachinenetworkreceivedDelegate del = null) { yield return rq.Send(); MachinenetworkreceivedDone(this); del?.Invoke(Result, Error); }
    }

    public static MachinenetworkreceivedRequest Machinenetworkreceived(MetricsQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        MachinenetworkreceivedRequest rq=new MachinenetworkreceivedRequest();
        rq.rq = Client.CreateRequest(ctx, "metrics_machinenetworkreceived", input);
        return rq;
    }

    public static void MachinenetworkreceivedDone(MachinenetworkreceivedRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (object)rd.ToObject(new object());
        }
    }


	public delegate void PayloadcpuusageDelegate(object result, string error);
    public class PayloadcpuusageRequest {  public object Result=new object();public string Error=""; public Request rq;
        public void Start(PayloadcpuusageDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PayloadcpuusageDelegate del = null) { yield return rq.Send(); PayloadcpuusageDone(this); del?.Invoke(Result, Error); }
    }

    public static PayloadcpuusageRequest Payloadcpuusage(MetricsQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PayloadcpuusageRequest rq=new PayloadcpuusageRequest();
        rq.rq = Client.CreateRequest(ctx, "metrics_payloadcpuusage", input);
        return rq;
    }

    public static void PayloadcpuusageDone(PayloadcpuusageRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (object)rd.ToObject(new object());
        }
    }


	public delegate void PayloadmemoryusageDelegate(object result, string error);
    public class PayloadmemoryusageRequest {  public object Result=new object();public string Error=""; public Request rq;
        public void Start(PayloadmemoryusageDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PayloadmemoryusageDelegate del = null) { yield return rq.Send(); PayloadmemoryusageDone(this); del?.Invoke(Result, Error); }
    }

    public static PayloadmemoryusageRequest Payloadmemoryusage(MetricsQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PayloadmemoryusageRequest rq=new PayloadmemoryusageRequest();
        rq.rq = Client.CreateRequest(ctx, "metrics_payloadmemoryusage", input);
        return rq;
    }

    public static void PayloadmemoryusageDone(PayloadmemoryusageRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (object)rd.ToObject(new object());
        }
    }


	public delegate void PayloadnetworksentDelegate(object result, string error);
    public class PayloadnetworksentRequest {  public object Result=new object();public string Error=""; public Request rq;
        public void Start(PayloadnetworksentDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PayloadnetworksentDelegate del = null) { yield return rq.Send(); PayloadnetworksentDone(this); del?.Invoke(Result, Error); }
    }

    public static PayloadnetworksentRequest Payloadnetworksent(MetricsQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PayloadnetworksentRequest rq=new PayloadnetworksentRequest();
        rq.rq = Client.CreateRequest(ctx, "metrics_payloadnetworksent", input);
        return rq;
    }

    public static void PayloadnetworksentDone(PayloadnetworksentRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (object)rd.ToObject(new object());
        }
    }


	public delegate void PayloadnetworkreceivedDelegate(object result, string error);
    public class PayloadnetworkreceivedRequest {  public object Result=new object();public string Error=""; public Request rq;
        public void Start(PayloadnetworkreceivedDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PayloadnetworkreceivedDelegate del = null) { yield return rq.Send(); PayloadnetworkreceivedDone(this); del?.Invoke(Result, Error); }
    }

    public static PayloadnetworkreceivedRequest Payloadnetworkreceived(MetricsQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PayloadnetworkreceivedRequest rq=new PayloadnetworkreceivedRequest();
        rq.rq = Client.CreateRequest(ctx, "metrics_payloadnetworkreceived", input);
        return rq;
    }

    public static void PayloadnetworkreceivedDone(PayloadnetworkreceivedRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (object)rd.ToObject(new object());
        }
    }


	public delegate void PayloadcountDelegate(object result, string error);
    public class PayloadcountRequest {  public object Result=new object();public string Error=""; public Request rq;
        public void Start(PayloadcountDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PayloadcountDelegate del = null) { yield return rq.Send(); PayloadcountDone(this); del?.Invoke(Result, Error); }
    }

    public static PayloadcountRequest Payloadcount(MetricsQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PayloadcountRequest rq=new PayloadcountRequest();
        rq.rq = Client.CreateRequest(ctx, "metrics_payloadcount", input);
        return rq;
    }

    public static void PayloadcountDone(PayloadcountRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (object)rd.ToObject(new object());
        }
    }


	public delegate void PayloadcounttotalDelegate(object result, string error);
    public class PayloadcounttotalRequest {  public object Result=new object();public string Error=""; public Request rq;
        public void Start(PayloadcounttotalDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(PayloadcounttotalDelegate del = null) { yield return rq.Send(); PayloadcounttotalDone(this); del?.Invoke(Result, Error); }
    }

    public static PayloadcounttotalRequest Payloadcounttotal(MetricsQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        PayloadcounttotalRequest rq=new PayloadcounttotalRequest();
        rq.rq = Client.CreateRequest(ctx, "metrics_payloadcounttotal", input);
        return rq;
    }

    public static void PayloadcounttotalDone(PayloadcounttotalRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (object)rd.ToObject(new object());
        }
    }


	public delegate void MachinecountDelegate(object result, string error);
    public class MachinecountRequest {  public object Result=new object();public string Error=""; public Request rq;
        public void Start(MachinecountDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(MachinecountDelegate del = null) { yield return rq.Send(); MachinecountDone(this); del?.Invoke(Result, Error); }
    }

    public static MachinecountRequest Machinecount(MetricsQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        MachinecountRequest rq=new MachinecountRequest();
        rq.rq = Client.CreateRequest(ctx, "metrics_machinecount", input);
        return rq;
    }

    public static void MachinecountDone(MachinecountRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (object)rd.ToObject(new object());
        }
    }


	public delegate void MachinecounttotalDelegate(object result, string error);
    public class MachinecounttotalRequest {  public object Result=new object();public string Error=""; public Request rq;
        public void Start(MachinecounttotalDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(MachinecounttotalDelegate del = null) { yield return rq.Send(); MachinecounttotalDone(this); del?.Invoke(Result, Error); }
    }

    public static MachinecounttotalRequest Machinecounttotal(MetricsQueryIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        MachinecounttotalRequest rq=new MachinecounttotalRequest();
        rq.rq = Client.CreateRequest(ctx, "metrics_machinecounttotal", input);
        return rq;
    }

    public static void MachinecounttotalDone(MachinecounttotalRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (object)rd.ToObject(new object());
        }
    }


}

} //namespace Zeuz

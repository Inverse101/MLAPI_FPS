// Code generated by "apigen"; DO NOT EDIT.
//Service Payload
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Zeuz
{


public class PayloadPagination
{
	public bool GetTotal=false;
	public int Offset=0;
	public int Limit=0;
	public string OrderBy=""; //arg:"required" help:"Possible values: <code>'payloadid'</code>, <code>'machineid'</code>, <code>'type'</code>, <code>'status'</code>"
	public bool OrderAsc=false;
	public PayloadPagination(bool _gettotal=false,int _offset=0,int _limit=0,string _orderby="",bool _orderasc=false) {GetTotal=_gettotal;Offset=_offset;Limit=_limit;OrderBy=_orderby;OrderAsc=_orderasc;}
	public PayloadPagination(PayloadPagination _copy) { if (_copy == null) return;GetTotal=_copy.GetTotal;Offset=_copy.Offset;Limit=_copy.Limit;OrderBy=_copy.OrderBy;OrderAsc=_copy.OrderAsc;}
};

public class PayloadGetIn : PayloadPagination
{
	public List<string> AllocationIDs=new List<string>();
	public List<string> MachineIDs=new List<string>();
	public List<string> PayloadIDs=new List<string>();
	public string LocationType="";
	public string RegionID="";
	public bool GetReserved=false;
	public bool GetUnreserved=false;
	public bool GetActive=false;
	public bool GetInactive=false;
	public PayloadGetIn(List<string> _allocationids=null,List<string> _machineids=null,List<string> _payloadids=null,string _locationtype="",string _regionid="",bool _getreserved=false,bool _getunreserved=false,bool _getactive=false,bool _getinactive=false,PayloadPagination _base=null) : base(_base) {if(_allocationids!=null)AllocationIDs=_allocationids;if(_machineids!=null)MachineIDs=_machineids;if(_payloadids!=null)PayloadIDs=_payloadids;LocationType=_locationtype;RegionID=_regionid;GetReserved=_getreserved;GetUnreserved=_getunreserved;GetActive=_getactive;GetInactive=_getinactive;}
	public PayloadGetIn(PayloadGetIn _copy) { if (_copy == null) return;if(_copy.AllocationIDs!=null)AllocationIDs=_copy.AllocationIDs;if(_copy.MachineIDs!=null)MachineIDs=_copy.MachineIDs;if(_copy.PayloadIDs!=null)PayloadIDs=_copy.PayloadIDs;LocationType=_copy.LocationType;RegionID=_copy.RegionID;GetReserved=_copy.GetReserved;GetUnreserved=_copy.GetUnreserved;GetActive=_copy.GetActive;GetInactive=_copy.GetInactive;}
};

public class PayloadPortMapping
{
	public int InternalPort=0;
	public int ExternalPort=0;
	public PayloadPortMapping(int _internalport=0,int _externalport=0) {InternalPort=_internalport;ExternalPort=_externalport;}
	public PayloadPortMapping(PayloadPortMapping _copy) { if (_copy == null) return;InternalPort=_copy.InternalPort;ExternalPort=_copy.ExternalPort;}
};

public class PayloadInfo
{
	public string PayloadID="";
	public string MachineID="";
	public string AllocationID="";
	public string EnvID="";
	public List<string> Regions=new List<string>();
	public PayloadDef PayloadDef=new PayloadDef();
	public bool Active=false;
	public bool Reservable=false;
	public bool Reserved=false;
	public string IP="";
	public List<PayloadPortMapping> PortMapping=new List<PayloadPortMapping>();
	public string Handling="";
	public string LocationType="";
	public Timestamp Created=new Timestamp();
	public Timestamp Modified=new Timestamp();
	public PayloadInfo(string _payloadid="",string _machineid="",string _allocationid="",string _envid="",List<string> _regions=null,PayloadDef _payloaddef=null,bool _active=false,bool _reservable=false,bool _reserved=false,string _ip="",List<PayloadPortMapping> _portmapping=null,string _handling="",string _locationtype="",Timestamp _created=new Timestamp(),Timestamp _modified=new Timestamp()) {PayloadID=_payloadid;MachineID=_machineid;AllocationID=_allocationid;EnvID=_envid;if(_regions!=null)Regions=_regions;if(_payloaddef!=null)PayloadDef=_payloaddef;Active=_active;Reservable=_reservable;Reserved=_reserved;IP=_ip;if(_portmapping!=null)PortMapping=_portmapping;Handling=_handling;LocationType=_locationtype;Created=_created;Modified=_modified;}
	public PayloadInfo(PayloadInfo _copy) { if (_copy == null) return;PayloadID=_copy.PayloadID;MachineID=_copy.MachineID;AllocationID=_copy.AllocationID;EnvID=_copy.EnvID;if(_copy.Regions!=null)Regions=_copy.Regions;if(_copy.PayloadDef!=null)PayloadDef=_copy.PayloadDef;Active=_copy.Active;Reservable=_copy.Reservable;Reserved=_copy.Reserved;IP=_copy.IP;if(_copy.PortMapping!=null)PortMapping=_copy.PortMapping;Handling=_copy.Handling;LocationType=_copy.LocationType;Created=_copy.Created;Modified=_copy.Modified;}
};

public class PayloadGetOut
{
	public List<PayloadInfo> Items=new List<PayloadInfo>();
	public long Count=0;
	public PayloadGetOut(List<PayloadInfo> _items=null,long _count=0) {if(_items!=null)Items=_items;Count=_count;}
	public PayloadGetOut(PayloadGetOut _copy) { if (_copy == null) return;if(_copy.Items!=null)Items=_copy.Items;Count=_copy.Count;}
};

public class PayloadCountGetOut
{
	public int Count=0;
	public PayloadCountGetOut(int _count=0) {Count=_count;}
	public PayloadCountGetOut(PayloadCountGetOut _copy) { if (_copy == null) return;Count=_copy.Count;}
};

public class PayloadSearchIn
{
	public string Query="";
	public int Size=0;
	public PayloadSearchIn(string _query="",int _size=0) {Query=_query;Size=_size;}
	public PayloadSearchIn(PayloadSearchIn _copy) { if (_copy == null) return;Query=_copy.Query;Size=_copy.Size;}
};

public class PayloadSearchOut
{
	public List<PayloadInfo> Items=new List<PayloadInfo>();
	public PayloadSearchOut(List<PayloadInfo> _items=null) {if(_items!=null)Items=_items;}
	public PayloadSearchOut(PayloadSearchOut _copy) { if (_copy == null) return;if(_copy.Items!=null)Items=_copy.Items;}
};

public class PayloadCreateIn
{
	public string AllocationID="";
	public string MachineID="";
	public PayloadDef PayloadDef=new PayloadDef();
	public string Hostname="";
	public int TTL=0;
	public PayloadCreateIn(string _allocationid="",string _machineid="",PayloadDef _payloaddef=null,string _hostname="",int _ttl=0) {AllocationID=_allocationid;MachineID=_machineid;if(_payloaddef!=null)PayloadDef=_payloaddef;Hostname=_hostname;TTL=_ttl;}
	public PayloadCreateIn(PayloadCreateIn _copy) { if (_copy == null) return;AllocationID=_copy.AllocationID;MachineID=_copy.MachineID;if(_copy.PayloadDef!=null)PayloadDef=_copy.PayloadDef;Hostname=_copy.Hostname;TTL=_copy.TTL;}
};

public class PayloadUpdateIn
{
	public string PayloadID="";
	public PayloadDef PayloadDef=new PayloadDef();
	public string PayloadRelocate="";
	public PayloadUpdateIn(string _payloadid="",PayloadDef _payloaddef=null,string _payloadrelocate="") {PayloadID=_payloadid;if(_payloaddef!=null)PayloadDef=_payloaddef;PayloadRelocate=_payloadrelocate;}
	public PayloadUpdateIn(PayloadUpdateIn _copy) { if (_copy == null) return;PayloadID=_copy.PayloadID;if(_copy.PayloadDef!=null)PayloadDef=_copy.PayloadDef;PayloadRelocate=_copy.PayloadRelocate;}
};

public class PayloadResumeIn
{
	public string PayloadID="";
	public string AllocationID="";
	public string MachineID="";
	public PayloadDef PayloadDef=new PayloadDef();
	public string Hostname="";
	public int TTL=0;
	public PayloadResumeIn(string _payloadid="",string _allocationid="",string _machineid="",PayloadDef _payloaddef=null,string _hostname="",int _ttl=0) {PayloadID=_payloadid;AllocationID=_allocationid;MachineID=_machineid;if(_payloaddef!=null)PayloadDef=_payloaddef;Hostname=_hostname;TTL=_ttl;}
	public PayloadResumeIn(PayloadResumeIn _copy) { if (_copy == null) return;PayloadID=_copy.PayloadID;AllocationID=_copy.AllocationID;MachineID=_copy.MachineID;if(_copy.PayloadDef!=null)PayloadDef=_copy.PayloadDef;Hostname=_copy.Hostname;TTL=_copy.TTL;}
};

public class PayloadAllocateIn
{
	public string AllocationID="";
	public string RegionID="";
	public int Count=0;
	public PayloadAllocateIn(string _allocationid="",string _regionid="",int _count=0) {AllocationID=_allocationid;RegionID=_regionid;Count=_count;}
	public PayloadAllocateIn(PayloadAllocateIn _copy) { if (_copy == null) return;AllocationID=_copy.AllocationID;RegionID=_copy.RegionID;Count=_copy.Count;}
};

public class PayloadStateGetIn
{
	public List<string> AllocationIDs=new List<string>();
	public List<string> MachineIDs=new List<string>();
	public List<string> PayloadIDs=new List<string>();
	public PayloadStateGetIn(List<string> _allocationids=null,List<string> _machineids=null,List<string> _payloadids=null) {if(_allocationids!=null)AllocationIDs=_allocationids;if(_machineids!=null)MachineIDs=_machineids;if(_payloadids!=null)PayloadIDs=_payloadids;}
	public PayloadStateGetIn(PayloadStateGetIn _copy) { if (_copy == null) return;if(_copy.AllocationIDs!=null)AllocationIDs=_copy.AllocationIDs;if(_copy.MachineIDs!=null)MachineIDs=_copy.MachineIDs;if(_copy.PayloadIDs!=null)PayloadIDs=_copy.PayloadIDs;}
};

public class PayloadStateInfo
{
	public string PayloadID="";
	public int State=0;
	public int PlayerCount=0;
	public Dictionary<string,string> PlayerList=new Dictionary<string,string>();
	public PayloadStateInfo(string _payloadid="",int _state=0,int _playercount=0,Dictionary<string,string> _playerlist=null) {PayloadID=_payloadid;State=_state;PlayerCount=_playercount;if(_playerlist!=null)PlayerList=_playerlist;}
	public PayloadStateInfo(PayloadStateInfo _copy) { if (_copy == null) return;PayloadID=_copy.PayloadID;State=_copy.State;PlayerCount=_copy.PlayerCount;if(_copy.PlayerList!=null)PlayerList=_copy.PlayerList;}
};

public class PayloadReserveLockSetIn
{
	public List<string> PayloadIDs=new List<string>();
	public bool Lock=false;
	public PayloadReserveLockSetIn(List<string> _payloadids=null,bool _lock=false) {if(_payloadids!=null)PayloadIDs=_payloadids;Lock=_lock;}
	public PayloadReserveLockSetIn(PayloadReserveLockSetIn _copy) { if (_copy == null) return;if(_copy.PayloadIDs!=null)PayloadIDs=_copy.PayloadIDs;Lock=_copy.Lock;}
};


public class ApiPayload
{ 
	public delegate void GetDelegate(PayloadGetOut result, string error);
    public class GetRequest {  public PayloadGetOut Result=new PayloadGetOut();public string Error=""; public Request rq;
        public void Start(GetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(GetDelegate del = null) { yield return rq.Send(); GetDone(this); del?.Invoke(Result, Error); }
    }

    public static GetRequest Get(PayloadGetIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        GetRequest rq=new GetRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_get", input);
        return rq;
    }

    public static void GetDone(GetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (PayloadGetOut)rd.ToObject(new PayloadGetOut());
        }
    }


	public delegate void GetcountDelegate(PayloadCountGetOut result, string error);
    public class GetcountRequest {  public PayloadCountGetOut Result=new PayloadCountGetOut();public string Error=""; public Request rq;
        public void Start(GetcountDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(GetcountDelegate del = null) { yield return rq.Send(); GetcountDone(this); del?.Invoke(Result, Error); }
    }

    public static GetcountRequest Getcount(PayloadGetIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        GetcountRequest rq=new GetcountRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_getcount", input);
        return rq;
    }

    public static void GetcountDone(GetcountRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (PayloadCountGetOut)rd.ToObject(new PayloadCountGetOut());
        }
    }


	public delegate void SearchDelegate(PayloadSearchOut result, string error);
    public class SearchRequest {  public PayloadSearchOut Result=new PayloadSearchOut();public string Error=""; public Request rq;
        public void Start(SearchDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(SearchDelegate del = null) { yield return rq.Send(); SearchDone(this); del?.Invoke(Result, Error); }
    }

    public static SearchRequest Search(PayloadSearchIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        SearchRequest rq=new SearchRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_search", input);
        return rq;
    }

    public static void SearchDone(SearchRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (PayloadSearchOut)rd.ToObject(new PayloadSearchOut());
        }
    }


	public delegate void CreateDelegate(PayloadInfo result, string error);
    public class CreateRequest {  public PayloadInfo Result=new PayloadInfo();public string Error=""; public Request rq;
        public void Start(CreateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(CreateDelegate del = null) { yield return rq.Send(); CreateDone(this); del?.Invoke(Result, Error); }
    }

    public static CreateRequest Create(PayloadCreateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        CreateRequest rq=new CreateRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_create", input);
        return rq;
    }

    public static void CreateDone(CreateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (PayloadInfo)rd.ToObject(new PayloadInfo());
        }
    }


	public delegate void UpdateDelegate(PayloadInfo result, string error);
    public class UpdateRequest {  public PayloadInfo Result=new PayloadInfo();public string Error=""; public Request rq;
        public void Start(UpdateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(UpdateDelegate del = null) { yield return rq.Send(); UpdateDone(this); del?.Invoke(Result, Error); }
    }

    public static UpdateRequest Update(PayloadUpdateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        UpdateRequest rq=new UpdateRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_update", input);
        return rq;
    }

    public static void UpdateDone(UpdateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (PayloadInfo)rd.ToObject(new PayloadInfo());
        }
    }


	public delegate void ResumeDelegate(PayloadInfo result, string error);
    public class ResumeRequest {  public PayloadInfo Result=new PayloadInfo();public string Error=""; public Request rq;
        public void Start(ResumeDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ResumeDelegate del = null) { yield return rq.Send(); ResumeDone(this); del?.Invoke(Result, Error); }
    }

    public static ResumeRequest Resume(PayloadResumeIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ResumeRequest rq=new ResumeRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_resume", input);
        return rq;
    }

    public static void ResumeDone(ResumeRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (PayloadInfo)rd.ToObject(new PayloadInfo());
        }
    }


	public delegate void RestartDelegate(PayloadInfo result, string error);
    public class RestartRequest {  public PayloadInfo Result=new PayloadInfo();public string Error=""; public Request rq;
        public void Start(RestartDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(RestartDelegate del = null) { yield return rq.Send(); RestartDone(this); del?.Invoke(Result, Error); }
    }

    public static RestartRequest Restart(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        RestartRequest rq=new RestartRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_restart", input);
        return rq;
    }

    public static void RestartDone(RestartRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (PayloadInfo)rd.ToObject(new PayloadInfo());
        }
    }


	public delegate void RemoveDelegate(string error);
    public class RemoveRequest { public string Error=""; public Request rq;
        public void Start(RemoveDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(RemoveDelegate del = null) { yield return rq.Send(); RemoveDone(this); del?.Invoke(Error); }
    }

    public static RemoveRequest Remove(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        RemoveRequest rq=new RemoveRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_remove", input);
        return rq;
    }

    public static void RemoveDone(RemoveRequest rq)
    {
        rq.Error = rq.rq.Error;
    }


	public delegate void ReserveDelegate(bool result, string error);
    public class ReserveRequest {  public bool Result=false;public string Error=""; public Request rq;
        public void Start(ReserveDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ReserveDelegate del = null) { yield return rq.Send(); ReserveDone(this); del?.Invoke(Result, Error); }
    }

    public static ReserveRequest Reserve(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ReserveRequest rq=new ReserveRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_reserve", input);
        return rq;
    }

    public static void ReserveDone(ReserveRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (bool)rd.ToObject(false);
        }
    }


	public delegate void UnreserveDelegate(bool result, string error);
    public class UnreserveRequest {  public bool Result=false;public string Error=""; public Request rq;
        public void Start(UnreserveDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(UnreserveDelegate del = null) { yield return rq.Send(); UnreserveDone(this); del?.Invoke(Result, Error); }
    }

    public static UnreserveRequest Unreserve(string input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        UnreserveRequest rq=new UnreserveRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_unreserve", input);
        return rq;
    }

    public static void UnreserveDone(UnreserveRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (bool)rd.ToObject(false);
        }
    }


	public delegate void AllocateDelegate(List<PayloadInfo> result, string error);
    public class AllocateRequest {  public List<PayloadInfo> Result=new List<PayloadInfo>();public string Error=""; public Request rq;
        public void Start(AllocateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(AllocateDelegate del = null) { yield return rq.Send(); AllocateDone(this); del?.Invoke(Result, Error); }
    }

    public static AllocateRequest Allocate(PayloadAllocateIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        AllocateRequest rq=new AllocateRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_allocate", input);
        return rq;
    }

    public static void AllocateDone(AllocateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<PayloadInfo>)rd.ToObject(new List<PayloadInfo>());
        }
    }


	public delegate void StateinfoDelegate(List<PayloadStateInfo> result, string error);
    public class StateinfoRequest {  public List<PayloadStateInfo> Result=new List<PayloadStateInfo>();public string Error=""; public Request rq;
        public void Start(StateinfoDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(StateinfoDelegate del = null) { yield return rq.Send(); StateinfoDone(this); del?.Invoke(Result, Error); }
    }

    public static StateinfoRequest Stateinfo(PayloadStateGetIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        StateinfoRequest rq=new StateinfoRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_stateinfo", input);
        return rq;
    }

    public static void StateinfoDone(StateinfoRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<PayloadStateInfo>)rd.ToObject(new List<PayloadStateInfo>());
        }
    }


	public delegate void StateupdateDelegate(List<PayloadStateInfo> result, string error);
    public class StateupdateRequest {  public List<PayloadStateInfo> Result=new List<PayloadStateInfo>();public string Error=""; public Request rq;
        public void Start(StateupdateDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(StateupdateDelegate del = null) { yield return rq.Send(); StateupdateDone(this); del?.Invoke(Result, Error); }
    }

    public static StateupdateRequest Stateupdate(PayloadStateGetIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        StateupdateRequest rq=new StateupdateRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_stateupdate", input);
        return rq;
    }

    public static void StateupdateDone(StateupdateRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<PayloadStateInfo>)rd.ToObject(new List<PayloadStateInfo>());
        }
    }


	public delegate void ReservelocksetDelegate(bool result, string error);
    public class ReservelocksetRequest {  public bool Result=false;public string Error=""; public Request rq;
        public void Start(ReservelocksetDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ReservelocksetDelegate del = null) { yield return rq.Send(); ReservelocksetDone(this); del?.Invoke(Result, Error); }
    }

    public static ReservelocksetRequest Reservelockset(PayloadReserveLockSetIn input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ReservelocksetRequest rq=new ReservelocksetRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_reservelockset", input);
        return rq;
    }

    public static void ReservelocksetDone(ReservelocksetRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (bool)rd.ToObject(false);
        }
    }


	public delegate void ReservelocklistDelegate(List<string> result, string error);
    public class ReservelocklistRequest {  public List<string> Result=new List<string>();public string Error=""; public Request rq;
        public void Start(ReservelocklistDelegate del = null, MonoBehaviour co = null) {Client.StartCo(co,Run(del));}
        public IEnumerator Run(ReservelocklistDelegate del = null) { yield return rq.Send(); ReservelocklistDone(this); del?.Invoke(Result, Error); }
    }

    public static ReservelocklistRequest Reservelocklist(List<string> input, Context ctx=null)
    {
        if (ctx == null) ctx = Context.Def;
        ReservelocklistRequest rq=new ReservelocklistRequest();
        rq.rq = Client.CreateRequest(ctx, "payload_reservelocklist", input);
        return rq;
    }

    public static void ReservelocklistDone(ReservelocklistRequest rq)
    {
        rq.Error = rq.rq.Error;
        JSONObject rd = rq.rq.ResponseData as JSONObject;
        if (rd != null)
        {
            rq.Result = (List<string>)rd.ToObject(new List<string>());
        }
    }


}

} //namespace Zeuz
